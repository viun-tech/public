/* tslint:disable */
/* eslint-disable */
/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Serializer for Azure ML inference requests. This corresponds to the schema of the request body that Azure ML expects. See https://learn.microsoft.com/en-us/azure/machine-learning/how-to-deploy-mlflow-models?view=azureml-api-2&tabs=azureml#input-structure
 * @export
 * @interface AzureMLInferenceRequest
 */
export interface AzureMLInferenceRequest {
    /**
     * 
     * @type {any}
     * @memberof AzureMLInferenceRequest
     */
    'input_data': any;
    /**
     * 
     * @type {any}
     * @memberof AzureMLInferenceRequest
     */
    'params'?: any;
}
/**
 * * `OK` - Ok * `DEFECT` - Defect
 * @export
 * @enum {string}
 */

export const BinaryClassEnum = {
    Ok: 'OK',
    Defect: 'DEFECT'
} as const;

export type BinaryClassEnum = typeof BinaryClassEnum[keyof typeof BinaryClassEnum];


/**
 * 
 * @export
 * @interface BinaryClassInspectionResult
 */
export interface BinaryClassInspectionResult {
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResult
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResult
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResult
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResult
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof BinaryClassInspectionResult
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResult
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResult
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResult
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResult
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof BinaryClassInspectionResult
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @interface BinaryClassInspectionResultRequest
 */
export interface BinaryClassInspectionResultRequest {
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof BinaryClassInspectionResultRequest
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultRequest
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof BinaryClassInspectionResultRequest
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @interface BinaryClassInspectionResultTyped
 */
export interface BinaryClassInspectionResultTyped {
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTyped
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTyped
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTyped
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTyped
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTyped
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTyped
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTyped
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTyped
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTyped
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof BinaryClassInspectionResultTyped
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @interface BinaryClassInspectionResultTypedRequest
 */
export interface BinaryClassInspectionResultTypedRequest {
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof BinaryClassInspectionResultTypedRequest
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const BlankEnum = {
    Empty: ''
} as const;

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


/**
 * 
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'inspection_object'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Case
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'open_datetime': string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'blueprint'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface CaseRequest
 */
export interface CaseRequest {
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'inspection_object'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CaseRequest
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof CaseRequest
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'blueprint'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CaseRequest
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface CaseValidationStatus
 */
export interface CaseValidationStatus {
    /**
     * 
     * @type {number}
     * @memberof CaseValidationStatus
     */
    'id': number;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof CaseValidationStatus
     */
    'validation_status': ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface ClassificationResult
 */
export interface ClassificationResult {
    /**
     * 
     * @type {number}
     * @memberof ClassificationResult
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResult
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResult
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResult
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResult
     */
    'image'?: number | null;
    /**
     * 
     * @type {any}
     * @memberof ClassificationResult
     */
    'result'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResult
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResult
     */
    'updated_at': string | null;
    /**
     * 
     * @type {ClassificationResultStatus}
     * @memberof ClassificationResult
     */
    'status'?: ClassificationResultStatus;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResult
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResult
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ClassificationResultRequest
 */
export interface ClassificationResultRequest {
    /**
     * 
     * @type {number}
     * @memberof ClassificationResultRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResultRequest
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClassificationResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {any}
     * @memberof ClassificationResultRequest
     */
    'result'?: any | null;
    /**
     * 
     * @type {ClassificationResultStatus}
     * @memberof ClassificationResultRequest
     */
    'status'?: ClassificationResultStatus;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResultRequest
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassificationResultRequest
     */
    'comment'?: string;
}
/**
 * @type ClassificationResultStatus
 * @export
 */
export type ClassificationResultStatus = BlankEnum | StatusEnum;

/**
 * 
 * @export
 * @interface CredentialsRequest
 */
export interface CredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof CredentialsRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CredentialsRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CustomUser
 */
export interface CustomUser {
    /**
     * 
     * @type {number}
     * @memberof CustomUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface CustomUserRequest
 */
export interface CustomUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface EmailAddress
 */
export interface EmailAddress {
    /**
     * 
     * @type {number}
     * @memberof EmailAddress
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EmailAddress
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    'verified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    'primary'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EmailAddress
     */
    'user': number;
}
/**
 * * `image/png` - png * `image/tiff` - tiff * `image/jpeg` - jpeg * `image/bmp` - bmp
 * @export
 * @enum {string}
 */

export const FormatEnum = {
    Png: 'image/png',
    Tiff: 'image/tiff',
    Jpeg: 'image/jpeg',
    Bmp: 'image/bmp'
} as const;

export type FormatEnum = typeof FormatEnum[keyof typeof FormatEnum];


/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'case'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Image
     */
    'inspection_results'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'updated_at': string | null;
    /**
     * 
     * @type {FormatEnum}
     * @memberof Image
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'capture_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof Image
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface ImageQualityGate
 */
export interface ImageQualityGate {
    /**
     * 
     * @type {number}
     * @memberof ImageQualityGate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ImageQualityGate
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageQualityGate
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGate
     */
    'good_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGate
     */
    'uncertain_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGate
     */
    'bad_quality_classes': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ImageQualityGate
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageQualityGate
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface ImageQualityGateRequest
 */
export interface ImageQualityGateRequest {
    /**
     * 
     * @type {number}
     * @memberof ImageQualityGateRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageQualityGateRequest
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGateRequest
     */
    'good_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGateRequest
     */
    'uncertain_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageQualityGateRequest
     */
    'bad_quality_classes': Array<string>;
}
/**
 * 
 * @export
 * @interface ImageQualityGateResult
 */
export interface ImageQualityGateResult {
    /**
     * 
     * @type {number}
     * @memberof ImageQualityGateResult
     */
    'id': number;
    /**
     * 
     * @type {QualityEnum}
     * @memberof ImageQualityGateResult
     */
    'quality': QualityEnum;
    /**
     * 
     * @type {number}
     * @memberof ImageQualityGateResult
     */
    'quality_gate': number;
}


/**
 * 
 * @export
 * @interface ImageRequest
 */
export interface ImageRequest {
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'case'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageRequest
     */
    'inspection_results'?: Array<number>;
    /**
     * 
     * @type {FormatEnum}
     * @memberof ImageRequest
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'capture_datetime': string;
    /**
     * 
     * @type {File}
     * @memberof ImageRequest
     */
    'file': File;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof ImageRequest
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface InspectionMetadata
 */
export interface InspectionMetadata {
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadata
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadata
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionMetadata
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadata
     */
    'schema': number;
    /**
     * 
     * @type {any}
     * @memberof InspectionMetadata
     */
    'data'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionMetadata
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionMetadata
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface InspectionMetadataRequest
 */
export interface InspectionMetadataRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadataRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionMetadataRequest
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadataRequest
     */
    'schema': number;
    /**
     * 
     * @type {any}
     * @memberof InspectionMetadataRequest
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface InspectionMetadataSchema
 */
export interface InspectionMetadataSchema {
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadataSchema
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadataSchema
     */
    'team': number;
    /**
     * 
     * @type {any}
     * @memberof InspectionMetadataSchema
     */
    'json': any;
    /**
     * 
     * @type {string}
     * @memberof InspectionMetadataSchema
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionMetadataSchema
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface InspectionMetadataSchemaRequest
 */
export interface InspectionMetadataSchemaRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionMetadataSchemaRequest
     */
    'team': number;
    /**
     * 
     * @type {any}
     * @memberof InspectionMetadataSchemaRequest
     */
    'json': any;
}
/**
 * 
 * @export
 * @interface InspectionObject
 */
export interface InspectionObject {
    /**
     * 
     * @type {number}
     * @memberof InspectionObject
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionObject
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionObject
     */
    'type'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionObject
     */
    'cases'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InspectionObject
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObject
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObject
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof InspectionObject
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObject
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface InspectionObjectRequest
 */
export interface InspectionObjectRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionObjectRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionObjectRequest
     */
    'type'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionObjectRequest
     */
    'cases'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectRequest
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface InspectionObjectType
 */
export interface InspectionObjectType {
    /**
     * 
     * @type {number}
     * @memberof InspectionObjectType
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionObjectType
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionObjectType
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectType
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectType
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectType
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface InspectionObjectTypeRequest
 */
export interface InspectionObjectTypeRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionObjectTypeRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionObjectTypeRequest
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectTypeRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectTypeRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionObjectTypeRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface InspectionProcessBlueprint
 */
export interface InspectionProcessBlueprint {
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprint
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'image_quality_gate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'ml_model'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprint
     */
    'inspection_object_type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprint
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprint
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprint
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface InspectionProcessBlueprintRequest
 */
export interface InspectionProcessBlueprintRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprintRequest
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprintRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprintRequest
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprintRequest
     */
    'image_quality_gate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprintRequest
     */
    'ml_model'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionProcessBlueprintRequest
     */
    'inspection_object_type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InspectionProcessBlueprintRequest
     */
    'description'?: string;
}
/**
 * @type InspectionResultPolymorphic
 * @export
 */
export type InspectionResultPolymorphic = { type: 'BinaryClassInspectionResult' } & BinaryClassInspectionResultTyped | { type: 'RatingInspectionResult' } & RatingInspectionResultTyped;

/**
 * @type InspectionResultPolymorphicRequest
 * @export
 */
export type InspectionResultPolymorphicRequest = { type: 'BinaryClassInspectionResult' } & BinaryClassInspectionResultTypedRequest | { type: 'RatingInspectionResult' } & RatingInspectionResultTypedRequest;

/**
 * 
 * @export
 * @interface InspectionStatus
 */
export interface InspectionStatus {
    /**
     * 
     * @type {number}
     * @memberof InspectionStatus
     */
    'id': number;
    /**
     * 
     * @type {InspectionStatusEnum}
     * @memberof InspectionStatus
     */
    'inspection_status': InspectionStatusEnum;
}


/**
 * * `NONE` - None * `OK` - Ok * `DEFECT` - Defect
 * @export
 * @enum {string}
 */

export const InspectionStatusEnum = {
    None: 'NONE',
    Ok: 'OK',
    Defect: 'DEFECT'
} as const;

export type InspectionStatusEnum = typeof InspectionStatusEnum[keyof typeof InspectionStatusEnum];


/**
 * 
 * @export
 * @interface MLModel
 */
export interface MLModel {
    /**
     * 
     * @type {number}
     * @memberof MLModel
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MLModel
     */
    'model': number;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'url'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MLModel
     */
    'teams': Array<number>;
}
/**
 * 
 * @export
 * @interface MLModelRequest
 */
export interface MLModelRequest {
    /**
     * 
     * @type {any}
     * @memberof MLModelRequest
     */
    'headers': any;
    /**
     * 
     * @type {number}
     * @memberof MLModelRequest
     */
    'model': number;
    /**
     * 
     * @type {string}
     * @memberof MLModelRequest
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelRequest
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface MLModelType
 */
export interface MLModelType {
    /**
     * 
     * @type {number}
     * @memberof MLModelType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface MLModelTypeRequest
 */
export interface MLModelTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    'id': number;
    /**
     * 
     * @type {CustomUser}
     * @memberof Membership
     */
    'user': CustomUser;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'role': string;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface MembershipRequest
 */
export interface MembershipRequest {
    /**
     * 
     * @type {string}
     * @memberof MembershipRequest
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface PatchedBinaryClassInspectionResultRequest
 */
export interface PatchedBinaryClassInspectionResultRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'confidence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof PatchedBinaryClassInspectionResultRequest
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @interface PatchedBinaryClassInspectionResultTypedRequest
 */
export interface PatchedBinaryClassInspectionResultTypedRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'confidence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {BinaryClassEnum}
     * @memberof PatchedBinaryClassInspectionResultTypedRequest
     */
    'binary_class'?: BinaryClassEnum;
}


/**
 * 
 * @export
 * @interface PatchedCaseRequest
 */
export interface PatchedCaseRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'inspection_object'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedCaseRequest
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedCaseRequest
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'blueprint'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedCaseRequest
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedClassificationResultRequest
 */
export interface PatchedClassificationResultRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedClassificationResultRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedClassificationResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedClassificationResultRequest
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedClassificationResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {any}
     * @memberof PatchedClassificationResultRequest
     */
    'result'?: any | null;
    /**
     * 
     * @type {ClassificationResultStatus}
     * @memberof PatchedClassificationResultRequest
     */
    'status'?: ClassificationResultStatus;
    /**
     * 
     * @type {string}
     * @memberof PatchedClassificationResultRequest
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedClassificationResultRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface PatchedImageQualityGateRequest
 */
export interface PatchedImageQualityGateRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedImageQualityGateRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedImageQualityGateRequest
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedImageQualityGateRequest
     */
    'good_quality_classes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedImageQualityGateRequest
     */
    'uncertain_quality_classes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedImageQualityGateRequest
     */
    'bad_quality_classes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PatchedImageRequest
 */
export interface PatchedImageRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'case'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedImageRequest
     */
    'inspection_results'?: Array<number>;
    /**
     * 
     * @type {FormatEnum}
     * @memberof PatchedImageRequest
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageRequest
     */
    'capture_datetime'?: string;
    /**
     * 
     * @type {File}
     * @memberof PatchedImageRequest
     */
    'file'?: File;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageRequest
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof PatchedImageRequest
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface PatchedInspectionMetadataRequest
 */
export interface PatchedInspectionMetadataRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionMetadataRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedInspectionMetadataRequest
     */
    'blueprints'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionMetadataRequest
     */
    'schema'?: number;
    /**
     * 
     * @type {any}
     * @memberof PatchedInspectionMetadataRequest
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface PatchedInspectionMetadataSchemaRequest
 */
export interface PatchedInspectionMetadataSchemaRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionMetadataSchemaRequest
     */
    'team'?: number;
    /**
     * 
     * @type {any}
     * @memberof PatchedInspectionMetadataSchemaRequest
     */
    'json'?: any;
}
/**
 * 
 * @export
 * @interface PatchedInspectionObjectRequest
 */
export interface PatchedInspectionObjectRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionObjectRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionObjectRequest
     */
    'type'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedInspectionObjectRequest
     */
    'cases'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PatchedInspectionObjectTypeRequest
 */
export interface PatchedInspectionObjectTypeRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionObjectTypeRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedInspectionObjectTypeRequest
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectTypeRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectTypeRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionObjectTypeRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PatchedInspectionProcessBlueprintRequest
 */
export interface PatchedInspectionProcessBlueprintRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'team'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'image_quality_gate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'ml_model'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'inspection_object_type'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionProcessBlueprintRequest
     */
    'description'?: string;
}
/**
 * @type PatchedInspectionResultPolymorphicRequest
 * @export
 */
export type PatchedInspectionResultPolymorphicRequest = { type: 'BinaryClassInspectionResult' } & PatchedBinaryClassInspectionResultTypedRequest | { type: 'RatingInspectionResult' } & PatchedRatingInspectionResultTypedRequest;

/**
 * 
 * @export
 * @interface PatchedMLModelRequest
 */
export interface PatchedMLModelRequest {
    /**
     * 
     * @type {any}
     * @memberof PatchedMLModelRequest
     */
    'headers'?: any;
    /**
     * 
     * @type {number}
     * @memberof PatchedMLModelRequest
     */
    'model'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelRequest
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelRequest
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedMLModelTypeRequest
 */
export interface PatchedMLModelTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedRatingInspectionResultRequest
 */
export interface PatchedRatingInspectionResultRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'confidence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultRequest
     */
    'rating'?: string;
}


/**
 * 
 * @export
 * @interface PatchedRatingInspectionResultTypedRequest
 */
export interface PatchedRatingInspectionResultTypedRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'confidence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingInspectionResultTypedRequest
     */
    'rating'?: string;
}
/**
 * * `GOOD` - GOOD * `UNCERTAIN` - UNCERTAIN * `BAD` - BAD
 * @export
 * @enum {string}
 */

export const QualityEnum = {
    Good: 'GOOD',
    Uncertain: 'UNCERTAIN',
    Bad: 'BAD'
} as const;

export type QualityEnum = typeof QualityEnum[keyof typeof QualityEnum];


/**
 * 
 * @export
 * @interface RatingInspectionResult
 */
export interface RatingInspectionResult {
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResult
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResult
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResult
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResult
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof RatingInspectionResult
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResult
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResult
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResult
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResult
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResult
     */
    'rating': string;
}


/**
 * 
 * @export
 * @interface RatingInspectionResultRequest
 */
export interface RatingInspectionResultRequest {
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {TypeEnum}
     * @memberof RatingInspectionResultRequest
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultRequest
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultRequest
     */
    'rating': string;
}


/**
 * 
 * @export
 * @interface RatingInspectionResultTyped
 */
export interface RatingInspectionResultTyped {
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTyped
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTyped
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTyped
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTyped
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTyped
     */
    'rating': string;
}
/**
 * 
 * @export
 * @interface RatingInspectionResultTypedRequest
 */
export interface RatingInspectionResultTypedRequest {
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTypedRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTypedRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RatingInspectionResultTypedRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTypedRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTypedRequest
     */
    'confidence': string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTypedRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingInspectionResultTypedRequest
     */
    'rating': string;
}
/**
 * * `PENDING` - Pending * `FAILED` - Failed * `SUCCESS` - Success
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Pending: 'PENDING',
    Failed: 'FAILED',
    Success: 'SUCCESS'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'customer'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'subscription'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Team
     */
    'members': Array<number>;
}
/**
 * 
 * @export
 * @interface TeamRequest
 */
export interface TeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof TeamRequest
     */
    'customer'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TeamRequest
     */
    'subscription'?: number | null;
}
/**
 * * `RatingInspectionResult` - RatingInspectionResult
 * @export
 * @enum {string}
 */

export const TypeEnum = {
    RatingInspectionResult: 'RatingInspectionResult'
} as const;

export type TypeEnum = typeof TypeEnum[keyof typeof TypeEnum];


/**
 * 
 * @export
 * @interface UserAPIKeyCreate
 */
export interface UserAPIKeyCreate {
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'created': string;
    /**
     * A free-form name for the API key. Need not be unique. 50 characters max.
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'name': string;
    /**
     * Once API key expires, clients cannot use it anymore.
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'expiry_date': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserAPIKeyCreate
     */
    'revoked': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'message': string;
}
/**
 * * `NONE` - None * `REQUESTED` - Validation Requested * `VALIDATED` - Validated
 * @export
 * @enum {string}
 */

export const ValidationStatusEnum = {
    None: 'NONE',
    Requested: 'REQUESTED',
    Validated: 'VALIDATED'
} as const;

export type ValidationStatusEnum = typeof ValidationStatusEnum[keyof typeof ValidationStatusEnum];



/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export const ApiKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new API key for the current user.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyCreate: async (credentialsRequest: CredentialsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialsRequest' is not null or undefined
            assertParamExists('apiKeyCreate', 'credentialsRequest', credentialsRequest)
            const localVarPath = `/api/api-keys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {string} id A unique value identifying this API key.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyRevoke: async (id: string, credentialsRequest: CredentialsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiKeyRevoke', 'id', id)
            // verify required parameter 'credentialsRequest' is not null or undefined
            assertParamExists('apiKeyRevoke', 'credentialsRequest', credentialsRequest)
            const localVarPath = `/api/api-keys/{id}/revoke/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export const ApiKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new API key for the current user.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyCreate(credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAPIKeyCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyCreate(credentialsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiKeysApi.apiKeyCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {string} id A unique value identifying this API key.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyRevoke(id: string, credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAPIKeyCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyRevoke(id, credentialsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiKeysApi.apiKeyRevoke']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ApiKeysApi - factory interface
 * @export
 */
export const ApiKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeysApiFp(configuration)
    return {
        /**
         * Create a new API key for the current user.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyCreate(credentialsRequest: CredentialsRequest, options?: any): AxiosPromise<UserAPIKeyCreate> {
            return localVarFp.apiKeyCreate(credentialsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {string} id A unique value identifying this API key.
         * @param {CredentialsRequest} credentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyRevoke(id: string, credentialsRequest: CredentialsRequest, options?: any): AxiosPromise<UserAPIKeyCreate> {
            return localVarFp.apiKeyRevoke(id, credentialsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiKeysApi - interface
 * @export
 * @interface ApiKeysApi
 */
export interface ApiKeysApiInterface {
    /**
     * Create a new API key for the current user.
     * @param {CredentialsRequest} credentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    apiKeyCreate(credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAPIKeyCreate>;

    /**
     * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
     * @param {string} id A unique value identifying this API key.
     * @param {CredentialsRequest} credentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    apiKeyRevoke(id: string, credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAPIKeyCreate>;

}

/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export class ApiKeysApi extends BaseAPI implements ApiKeysApiInterface {
    /**
     * Create a new API key for the current user.
     * @param {CredentialsRequest} credentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public apiKeyCreate(credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).apiKeyCreate(credentialsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
     * @param {string} id A unique value identifying this API key.
     * @param {CredentialsRequest} credentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public apiKeyRevoke(id: string, credentialsRequest: CredentialsRequest, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).apiKeyRevoke(id, credentialsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CaseApi - axios parameter creator
 * @export
 */
export const CaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseCreate: async (caseRequest: CaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseRequest' is not null or undefined
            assertParamExists('caseCreate', 'caseRequest', caseRequest)
            const localVarPath = `/api/case/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(caseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caseDestroy', 'id', id)
            const localVarPath = `/api/case/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseInspectionStatusList: async (id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/case/inspection_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/case/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {PatchedCaseRequest} [patchedCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casePartialUpdate: async (id: number, patchedCaseRequest?: PatchedCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casePartialUpdate', 'id', id)
            const localVarPath = `/api/case/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caseRetrieve', 'id', id)
            const localVarPath = `/api/case/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseSendValidationEmailRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caseSendValidationEmailRetrieve', 'id', id)
            const localVarPath = `/api/case/{id}/send_validation_email/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseUpdate: async (id: number, caseRequest: CaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caseUpdate', 'id', id)
            // verify required parameter 'caseRequest' is not null or undefined
            assertParamExists('caseUpdate', 'caseRequest', caseRequest)
            const localVarPath = `/api/case/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(caseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseValidationStatusList: async (id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/case/validation_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseApi - functional programming interface
 * @export
 */
export const CaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseCreate(caseRequest: CaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseCreate(caseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseInspectionStatusList(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseInspectionStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Case>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {PatchedCaseRequest} [patchedCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casePartialUpdate(id: number, patchedCaseRequest?: PatchedCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casePartialUpdate(id, patchedCaseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.casePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseSendValidationEmailRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseSendValidationEmailRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseUpdate(id: number, caseRequest: CaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseUpdate(id, caseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseValidationStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CaseValidationStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseValidationStatusList(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaseApi.caseValidationStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CaseApi - factory interface
 * @export
 */
export const CaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseCreate(caseRequest: CaseRequest, options?: any): AxiosPromise<Case> {
            return localVarFp.caseCreate(caseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.caseDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseInspectionStatusList(id?: Array<number>, options?: any): AxiosPromise<Array<InspectionStatus>> {
            return localVarFp.caseInspectionStatusList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<Case>> {
            return localVarFp.caseList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {PatchedCaseRequest} [patchedCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casePartialUpdate(id: number, patchedCaseRequest?: PatchedCaseRequest, options?: any): AxiosPromise<Case> {
            return localVarFp.casePartialUpdate(id, patchedCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Case> {
            return localVarFp.caseRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseSendValidationEmailRetrieve(id: number, options?: any): AxiosPromise<Case> {
            return localVarFp.caseSendValidationEmailRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this case.
         * @param {CaseRequest} caseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseUpdate(id: number, caseRequest: CaseRequest, options?: any): AxiosPromise<Case> {
            return localVarFp.caseUpdate(id, caseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseValidationStatusList(id?: Array<number>, options?: any): AxiosPromise<Array<CaseValidationStatus>> {
            return localVarFp.caseValidationStatusList(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseApi - interface
 * @export
 * @interface CaseApi
 */
export interface CaseApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {CaseRequest} caseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseCreate(caseRequest: CaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionStatus>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Case>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {PatchedCaseRequest} [patchedCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    casePartialUpdate(id: number, patchedCaseRequest?: PatchedCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Case>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Case>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseRequest} caseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseUpdate(id: number, caseRequest: CaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApiInterface
     */
    caseValidationStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<CaseValidationStatus>>;

}

/**
 * CaseApi - object-oriented interface
 * @export
 * @class CaseApi
 * @extends {BaseAPI}
 */
export class CaseApi extends BaseAPI implements CaseApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {CaseRequest} caseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseCreate(caseRequest: CaseRequest, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseCreate(caseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseDestroy(id: number, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseInspectionStatusList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {PatchedCaseRequest} [patchedCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public casePartialUpdate(id: number, patchedCaseRequest?: PatchedCaseRequest, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).casePartialUpdate(id, patchedCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseSendValidationEmailRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseRequest} caseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseUpdate(id: number, caseRequest: CaseRequest, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseUpdate(id, caseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseApi
     */
    public caseValidationStatusList(id?: Array<number>, options?: RawAxiosRequestConfig) {
        return CaseApiFp(this.configuration).caseValidationStatusList(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [_case] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [inspectionResults] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate: async (team: number, captureDatetime: string, file: File, _case?: number | null, uploadedBy?: number | null, inspectionResults?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            assertParamExists('imageCreate', 'team', team)
            // verify required parameter 'captureDatetime' is not null or undefined
            assertParamExists('imageCreate', 'captureDatetime', captureDatetime)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('imageCreate', 'file', file)
            const localVarPath = `/api/image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


            if (team !== undefined) { 
                localVarFormParams.append('team', team as any);
            }
    
            if (_case !== undefined) { 
                localVarFormParams.append('case', _case as any);
            }
    
            if (uploadedBy !== undefined) { 
                localVarFormParams.append('uploaded_by', uploadedBy as any);
            }
                if (inspectionResults) {
                localVarFormParams.append('inspection_results', inspectionResults.join(COLLECTION_FORMATS.csv));
            }

    
            if (format !== undefined) { 
                localVarFormParams.append('format', format as any);
            }
    
            if (captureDatetime !== undefined) { 
                localVarFormParams.append('capture_datetime', captureDatetime as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (partId !== undefined) { 
                localVarFormParams.append('part_id', partId as any);
            }
    
            if (validationStatus !== undefined) { 
                localVarFormParams.append('validation_status', validationStatus as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageDestroy', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspectionStatusList: async (id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/inspection_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePartialUpdate: async (id: number, patchedImageRequest?: PatchedImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagePartialUpdate', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageQualityList: async (id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/quality/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageRetrieve', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUpdate: async (id: number, imageRequest: ImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageUpdate', 'id', id)
            // verify required parameter 'imageRequest' is not null or undefined
            assertParamExists('imageUpdate', 'imageRequest', imageRequest)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [_case] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [inspectionResults] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCreate(team: number, captureDatetime: string, file: File, _case?: number | null, uploadedBy?: number | null, inspectionResults?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCreate(team, captureDatetime, file, _case, uploadedBy, inspectionResults, format, partId, validationStatus, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageInspectionStatusList(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageInspectionStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Image>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePartialUpdate(id, patchedImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imagePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageQualityList(id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageQualityGateResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageQualityList(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageQualityList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageUpdate(id, imageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [_case] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [inspectionResults] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(team: number, captureDatetime: string, file: File, _case?: number | null, uploadedBy?: number | null, inspectionResults?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: any): AxiosPromise<Image> {
            return localVarFp.imageCreate(team, captureDatetime, file, _case, uploadedBy, inspectionResults, format, partId, validationStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.imageDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspectionStatusList(id?: Array<number>, options?: any): AxiosPromise<Array<InspectionStatus>> {
            return localVarFp.imageInspectionStatusList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<Image>> {
            return localVarFp.imageList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: any): AxiosPromise<Image> {
            return localVarFp.imagePartialUpdate(id, patchedImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageQualityList(id?: Array<number>, options?: any): AxiosPromise<Array<ImageQualityGateResult>> {
            return localVarFp.imageQualityList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Image> {
            return localVarFp.imageRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUpdate(id: number, imageRequest: ImageRequest, options?: any): AxiosPromise<Image> {
            return localVarFp.imageUpdate(id, imageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - interface
 * @export
 * @interface ImageApi
 */
export interface ImageApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} team 
     * @param {string} captureDatetime 
     * @param {File} file 
     * @param {number | null} [_case] 
     * @param {number | null} [uploadedBy] 
     * @param {Array<number>} [inspectionResults] 
     * @param {FormatEnum} [format] 
     * @param {string} [partId] 
     * @param {ValidationStatusEnum} [validationStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageCreate(team: number, captureDatetime: string, file: File, _case?: number | null, uploadedBy?: number | null, inspectionResults?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionStatus>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Image>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {PatchedImageRequest} [patchedImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageQualityList(id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageQualityGateResult>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {ImageRequest} imageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI implements ImageApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} team 
     * @param {string} captureDatetime 
     * @param {File} file 
     * @param {number | null} [_case] 
     * @param {number | null} [uploadedBy] 
     * @param {Array<number>} [inspectionResults] 
     * @param {FormatEnum} [format] 
     * @param {string} [partId] 
     * @param {ValidationStatusEnum} [validationStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCreate(team: number, captureDatetime: string, file: File, _case?: number | null, uploadedBy?: number | null, inspectionResults?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCreate(team, captureDatetime, file, _case, uploadedBy, inspectionResults, format, partId, validationStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageInspectionStatusList(id?: Array<number>, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageInspectionStatusList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {PatchedImageRequest} [patchedImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePartialUpdate(id, patchedImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageQualityList(id?: Array<number>, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageQualityList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {ImageRequest} imageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageUpdate(id, imageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImagequalitygateApi - axios parameter creator
 * @export
 */
export const ImagequalitygateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateCreate: async (imageQualityGateRequest: ImageQualityGateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageQualityGateRequest' is not null or undefined
            assertParamExists('imagequalitygateCreate', 'imageQualityGateRequest', imageQualityGateRequest)
            const localVarPath = `/api/imagequalitygate/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageQualityGateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagequalitygateDestroy', 'id', id)
            const localVarPath = `/api/imagequalitygate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/imagequalitygate/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {PatchedImageQualityGateRequest} [patchedImageQualityGateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygatePartialUpdate: async (id: number, patchedImageQualityGateRequest?: PatchedImageQualityGateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagequalitygatePartialUpdate', 'id', id)
            const localVarPath = `/api/imagequalitygate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageQualityGateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagequalitygateRetrieve', 'id', id)
            const localVarPath = `/api/imagequalitygate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateUpdate: async (id: number, imageQualityGateRequest: ImageQualityGateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagequalitygateUpdate', 'id', id)
            // verify required parameter 'imageQualityGateRequest' is not null or undefined
            assertParamExists('imagequalitygateUpdate', 'imageQualityGateRequest', imageQualityGateRequest)
            const localVarPath = `/api/imagequalitygate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageQualityGateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagequalitygateApi - functional programming interface
 * @export
 */
export const ImagequalitygateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagequalitygateApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygateCreate(imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageQualityGate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygateCreate(imageQualityGateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygateDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygateDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygateDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygateList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageQualityGate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygateList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygateList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {PatchedImageQualityGateRequest} [patchedImageQualityGateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygatePartialUpdate(id: number, patchedImageQualityGateRequest?: PatchedImageQualityGateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageQualityGate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygatePartialUpdate(id, patchedImageQualityGateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygatePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygateRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageQualityGate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygateRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygateRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagequalitygateUpdate(id: number, imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageQualityGate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagequalitygateUpdate(id, imageQualityGateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagequalitygateApi.imagequalitygateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImagequalitygateApi - factory interface
 * @export
 */
export const ImagequalitygateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagequalitygateApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateCreate(imageQualityGateRequest: ImageQualityGateRequest, options?: any): AxiosPromise<ImageQualityGate> {
            return localVarFp.imagequalitygateCreate(imageQualityGateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.imagequalitygateDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<ImageQualityGate>> {
            return localVarFp.imagequalitygateList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {PatchedImageQualityGateRequest} [patchedImageQualityGateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygatePartialUpdate(id: number, patchedImageQualityGateRequest?: PatchedImageQualityGateRequest, options?: any): AxiosPromise<ImageQualityGate> {
            return localVarFp.imagequalitygatePartialUpdate(id, patchedImageQualityGateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ImageQualityGate> {
            return localVarFp.imagequalitygateRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image quality gate.
         * @param {ImageQualityGateRequest} imageQualityGateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagequalitygateUpdate(id: number, imageQualityGateRequest: ImageQualityGateRequest, options?: any): AxiosPromise<ImageQualityGate> {
            return localVarFp.imagequalitygateUpdate(id, imageQualityGateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagequalitygateApi - interface
 * @export
 * @interface ImagequalitygateApi
 */
export interface ImagequalitygateApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageQualityGateRequest} imageQualityGateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygateCreate(imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageQualityGate>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygateDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygateList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageQualityGate>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {PatchedImageQualityGateRequest} [patchedImageQualityGateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygatePartialUpdate(id: number, patchedImageQualityGateRequest?: PatchedImageQualityGateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageQualityGate>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygateRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImageQualityGate>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {ImageQualityGateRequest} imageQualityGateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApiInterface
     */
    imagequalitygateUpdate(id: number, imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageQualityGate>;

}

/**
 * ImagequalitygateApi - object-oriented interface
 * @export
 * @class ImagequalitygateApi
 * @extends {BaseAPI}
 */
export class ImagequalitygateApi extends BaseAPI implements ImagequalitygateApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageQualityGateRequest} imageQualityGateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygateCreate(imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygateCreate(imageQualityGateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygateDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygateDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygateList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygateList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {PatchedImageQualityGateRequest} [patchedImageQualityGateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygatePartialUpdate(id: number, patchedImageQualityGateRequest?: PatchedImageQualityGateRequest, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygatePartialUpdate(id, patchedImageQualityGateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygateRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygateRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image quality gate.
     * @param {ImageQualityGateRequest} imageQualityGateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagequalitygateApi
     */
    public imagequalitygateUpdate(id: number, imageQualityGateRequest: ImageQualityGateRequest, options?: RawAxiosRequestConfig) {
        return ImagequalitygateApiFp(this.configuration).imagequalitygateUpdate(id, imageQualityGateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionmetadataApi - axios parameter creator
 * @export
 */
export const InspectionmetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataCreate: async (inspectionMetadataRequest: InspectionMetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionMetadataRequest' is not null or undefined
            assertParamExists('inspectionmetadataCreate', 'inspectionMetadataRequest', inspectionMetadataRequest)
            const localVarPath = `/api/inspectionmetadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataDestroy', 'id', id)
            const localVarPath = `/api/inspectionmetadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionmetadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {PatchedInspectionMetadataRequest} [patchedInspectionMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataPartialUpdate: async (id: number, patchedInspectionMetadataRequest?: PatchedInspectionMetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataPartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionmetadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataRetrieve', 'id', id)
            const localVarPath = `/api/inspectionmetadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataUpdate: async (id: number, inspectionMetadataRequest: InspectionMetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataUpdate', 'id', id)
            // verify required parameter 'inspectionMetadataRequest' is not null or undefined
            assertParamExists('inspectionmetadataUpdate', 'inspectionMetadataRequest', inspectionMetadataRequest)
            const localVarPath = `/api/inspectionmetadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionmetadataApi - functional programming interface
 * @export
 */
export const InspectionmetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionmetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataCreate(inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataCreate(inspectionMetadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {PatchedInspectionMetadataRequest} [patchedInspectionMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataPartialUpdate(id: number, patchedInspectionMetadataRequest?: PatchedInspectionMetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataPartialUpdate(id, patchedInspectionMetadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataUpdate(id: number, inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataUpdate(id, inspectionMetadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataApi.inspectionmetadataUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionmetadataApi - factory interface
 * @export
 */
export const InspectionmetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionmetadataApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataCreate(inspectionMetadataRequest: InspectionMetadataRequest, options?: any): AxiosPromise<InspectionMetadata> {
            return localVarFp.inspectionmetadataCreate(inspectionMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionmetadataDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<InspectionMetadata>> {
            return localVarFp.inspectionmetadataList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {PatchedInspectionMetadataRequest} [patchedInspectionMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataPartialUpdate(id: number, patchedInspectionMetadataRequest?: PatchedInspectionMetadataRequest, options?: any): AxiosPromise<InspectionMetadata> {
            return localVarFp.inspectionmetadataPartialUpdate(id, patchedInspectionMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionMetadata> {
            return localVarFp.inspectionmetadataRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata.
         * @param {InspectionMetadataRequest} inspectionMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataUpdate(id: number, inspectionMetadataRequest: InspectionMetadataRequest, options?: any): AxiosPromise<InspectionMetadata> {
            return localVarFp.inspectionmetadataUpdate(id, inspectionMetadataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionmetadataApi - interface
 * @export
 * @interface InspectionmetadataApi
 */
export interface InspectionmetadataApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionMetadataRequest} inspectionMetadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataCreate(inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionMetadata>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {PatchedInspectionMetadataRequest} [patchedInspectionMetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataPartialUpdate(id: number, patchedInspectionMetadataRequest?: PatchedInspectionMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {InspectionMetadataRequest} inspectionMetadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApiInterface
     */
    inspectionmetadataUpdate(id: number, inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadata>;

}

/**
 * InspectionmetadataApi - object-oriented interface
 * @export
 * @class InspectionmetadataApi
 * @extends {BaseAPI}
 */
export class InspectionmetadataApi extends BaseAPI implements InspectionmetadataApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionMetadataRequest} inspectionMetadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataCreate(inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataCreate(inspectionMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {PatchedInspectionMetadataRequest} [patchedInspectionMetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataPartialUpdate(id: number, patchedInspectionMetadataRequest?: PatchedInspectionMetadataRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataPartialUpdate(id, patchedInspectionMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata.
     * @param {InspectionMetadataRequest} inspectionMetadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataApi
     */
    public inspectionmetadataUpdate(id: number, inspectionMetadataRequest: InspectionMetadataRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataApiFp(this.configuration).inspectionmetadataUpdate(id, inspectionMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionmetadataschemaApi - axios parameter creator
 * @export
 */
export const InspectionmetadataschemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaCreate: async (inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionMetadataSchemaRequest' is not null or undefined
            assertParamExists('inspectionmetadataschemaCreate', 'inspectionMetadataSchemaRequest', inspectionMetadataSchemaRequest)
            const localVarPath = `/api/inspectionmetadataschema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionMetadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataschemaDestroy', 'id', id)
            const localVarPath = `/api/inspectionmetadataschema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionmetadataschema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {PatchedInspectionMetadataSchemaRequest} [patchedInspectionMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaPartialUpdate: async (id: number, patchedInspectionMetadataSchemaRequest?: PatchedInspectionMetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataschemaPartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionmetadataschema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionMetadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataschemaRetrieve', 'id', id)
            const localVarPath = `/api/inspectionmetadataschema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaUpdate: async (id: number, inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionmetadataschemaUpdate', 'id', id)
            // verify required parameter 'inspectionMetadataSchemaRequest' is not null or undefined
            assertParamExists('inspectionmetadataschemaUpdate', 'inspectionMetadataSchemaRequest', inspectionMetadataSchemaRequest)
            const localVarPath = `/api/inspectionmetadataschema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionMetadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionmetadataschemaApi - functional programming interface
 * @export
 */
export const InspectionmetadataschemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionmetadataschemaApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionMetadataSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {PatchedInspectionMetadataSchemaRequest} [patchedInspectionMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaPartialUpdate(id: number, patchedInspectionMetadataSchemaRequest?: PatchedInspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaPartialUpdate(id, patchedInspectionMetadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionmetadataschemaUpdate(id: number, inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionMetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionmetadataschemaUpdate(id, inspectionMetadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionmetadataschemaApi.inspectionmetadataschemaUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionmetadataschemaApi - factory interface
 * @export
 */
export const InspectionmetadataschemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionmetadataschemaApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: any): AxiosPromise<InspectionMetadataSchema> {
            return localVarFp.inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionmetadataschemaDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<InspectionMetadataSchema>> {
            return localVarFp.inspectionmetadataschemaList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {PatchedInspectionMetadataSchemaRequest} [patchedInspectionMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaPartialUpdate(id: number, patchedInspectionMetadataSchemaRequest?: PatchedInspectionMetadataSchemaRequest, options?: any): AxiosPromise<InspectionMetadataSchema> {
            return localVarFp.inspectionmetadataschemaPartialUpdate(id, patchedInspectionMetadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionMetadataSchema> {
            return localVarFp.inspectionmetadataschemaRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection metadata schema.
         * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionmetadataschemaUpdate(id: number, inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: any): AxiosPromise<InspectionMetadataSchema> {
            return localVarFp.inspectionmetadataschemaUpdate(id, inspectionMetadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionmetadataschemaApi - interface
 * @export
 * @interface InspectionmetadataschemaApi
 */
export interface InspectionmetadataschemaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionMetadataSchema>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {PatchedInspectionMetadataSchemaRequest} [patchedInspectionMetadataSchemaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaPartialUpdate(id: number, patchedInspectionMetadataSchemaRequest?: PatchedInspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApiInterface
     */
    inspectionmetadataschemaUpdate(id: number, inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionMetadataSchema>;

}

/**
 * InspectionmetadataschemaApi - object-oriented interface
 * @export
 * @class InspectionmetadataschemaApi
 * @extends {BaseAPI}
 */
export class InspectionmetadataschemaApi extends BaseAPI implements InspectionmetadataschemaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaCreate(inspectionMetadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {PatchedInspectionMetadataSchemaRequest} [patchedInspectionMetadataSchemaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaPartialUpdate(id: number, patchedInspectionMetadataSchemaRequest?: PatchedInspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaPartialUpdate(id, patchedInspectionMetadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection metadata schema.
     * @param {InspectionMetadataSchemaRequest} inspectionMetadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionmetadataschemaApi
     */
    public inspectionmetadataschemaUpdate(id: number, inspectionMetadataSchemaRequest: InspectionMetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return InspectionmetadataschemaApiFp(this.configuration).inspectionmetadataschemaUpdate(id, inspectionMetadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionobjectApi - axios parameter creator
 * @export
 */
export const InspectionobjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectCreate: async (inspectionObjectRequest: InspectionObjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionObjectRequest' is not null or undefined
            assertParamExists('inspectionobjectCreate', 'inspectionObjectRequest', inspectionObjectRequest)
            const localVarPath = `/api/inspectionobject/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionObjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjectDestroy', 'id', id)
            const localVarPath = `/api/inspectionobject/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {Array<number>} [type] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectList: async (fields?: string, id?: Array<number>, identifier?: Array<string>, type?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionobject/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (identifier) {
                localVarQueryParameter['identifier'] = identifier.join(COLLECTION_FORMATS.csv);
            }

            if (type) {
                localVarQueryParameter['type'] = type.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {PatchedInspectionObjectRequest} [patchedInspectionObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectPartialUpdate: async (id: number, patchedInspectionObjectRequest?: PatchedInspectionObjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjectPartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionobject/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionObjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjectRetrieve', 'id', id)
            const localVarPath = `/api/inspectionobject/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectUpdate: async (id: number, inspectionObjectRequest: InspectionObjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjectUpdate', 'id', id)
            // verify required parameter 'inspectionObjectRequest' is not null or undefined
            assertParamExists('inspectionobjectUpdate', 'inspectionObjectRequest', inspectionObjectRequest)
            const localVarPath = `/api/inspectionobject/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionObjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionobjectApi - functional programming interface
 * @export
 */
export const InspectionobjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionobjectApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectCreate(inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectCreate(inspectionObjectRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {Array<number>} [type] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectList(fields?: string, id?: Array<number>, identifier?: Array<string>, type?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionObject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectList(fields, id, identifier, type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {PatchedInspectionObjectRequest} [patchedInspectionObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectPartialUpdate(id: number, patchedInspectionObjectRequest?: PatchedInspectionObjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectPartialUpdate(id, patchedInspectionObjectRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjectUpdate(id: number, inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjectUpdate(id, inspectionObjectRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjectApi.inspectionobjectUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionobjectApi - factory interface
 * @export
 */
export const InspectionobjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionobjectApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectCreate(inspectionObjectRequest: InspectionObjectRequest, options?: any): AxiosPromise<InspectionObject> {
            return localVarFp.inspectionobjectCreate(inspectionObjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionobjectDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {Array<number>} [type] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectList(fields?: string, id?: Array<number>, identifier?: Array<string>, type?: Array<number>, options?: any): AxiosPromise<Array<InspectionObject>> {
            return localVarFp.inspectionobjectList(fields, id, identifier, type, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {PatchedInspectionObjectRequest} [patchedInspectionObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectPartialUpdate(id: number, patchedInspectionObjectRequest?: PatchedInspectionObjectRequest, options?: any): AxiosPromise<InspectionObject> {
            return localVarFp.inspectionobjectPartialUpdate(id, patchedInspectionObjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionObject> {
            return localVarFp.inspectionobjectRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object.
         * @param {InspectionObjectRequest} inspectionObjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjectUpdate(id: number, inspectionObjectRequest: InspectionObjectRequest, options?: any): AxiosPromise<InspectionObject> {
            return localVarFp.inspectionobjectUpdate(id, inspectionObjectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionobjectApi - interface
 * @export
 * @interface InspectionobjectApi
 */
export interface InspectionobjectApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionObjectRequest} inspectionObjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectCreate(inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObject>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {Array<string>} [identifier] Multiple values may be separated by commas.
     * @param {Array<number>} [type] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectList(fields?: string, id?: Array<number>, identifier?: Array<string>, type?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionObject>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {PatchedInspectionObjectRequest} [patchedInspectionObjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectPartialUpdate(id: number, patchedInspectionObjectRequest?: PatchedInspectionObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObject>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObject>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {InspectionObjectRequest} inspectionObjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApiInterface
     */
    inspectionobjectUpdate(id: number, inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObject>;

}

/**
 * InspectionobjectApi - object-oriented interface
 * @export
 * @class InspectionobjectApi
 * @extends {BaseAPI}
 */
export class InspectionobjectApi extends BaseAPI implements InspectionobjectApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionObjectRequest} inspectionObjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectCreate(inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectCreate(inspectionObjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {Array<string>} [identifier] Multiple values may be separated by commas.
     * @param {Array<number>} [type] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectList(fields?: string, id?: Array<number>, identifier?: Array<string>, type?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectList(fields, id, identifier, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {PatchedInspectionObjectRequest} [patchedInspectionObjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectPartialUpdate(id: number, patchedInspectionObjectRequest?: PatchedInspectionObjectRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectPartialUpdate(id, patchedInspectionObjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object.
     * @param {InspectionObjectRequest} inspectionObjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjectApi
     */
    public inspectionobjectUpdate(id: number, inspectionObjectRequest: InspectionObjectRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjectApiFp(this.configuration).inspectionobjectUpdate(id, inspectionObjectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionobjecttypeApi - axios parameter creator
 * @export
 */
export const InspectionobjecttypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeCreate: async (inspectionObjectTypeRequest: InspectionObjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionObjectTypeRequest' is not null or undefined
            assertParamExists('inspectionobjecttypeCreate', 'inspectionObjectTypeRequest', inspectionObjectTypeRequest)
            const localVarPath = `/api/inspectionobjecttype/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionObjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjecttypeDestroy', 'id', id)
            const localVarPath = `/api/inspectionobjecttype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionobjecttype/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {PatchedInspectionObjectTypeRequest} [patchedInspectionObjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypePartialUpdate: async (id: number, patchedInspectionObjectTypeRequest?: PatchedInspectionObjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjecttypePartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionobjecttype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionObjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjecttypeRetrieve', 'id', id)
            const localVarPath = `/api/inspectionobjecttype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeUpdate: async (id: number, inspectionObjectTypeRequest: InspectionObjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionobjecttypeUpdate', 'id', id)
            // verify required parameter 'inspectionObjectTypeRequest' is not null or undefined
            assertParamExists('inspectionobjecttypeUpdate', 'inspectionObjectTypeRequest', inspectionObjectTypeRequest)
            const localVarPath = `/api/inspectionobjecttype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionObjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionobjecttypeApi - functional programming interface
 * @export
 */
export const InspectionobjecttypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionobjecttypeApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypeCreate(inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObjectType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypeCreate(inspectionObjectTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypeDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypeDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypeDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypeList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionObjectType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypeList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypeList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {PatchedInspectionObjectTypeRequest} [patchedInspectionObjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypePartialUpdate(id: number, patchedInspectionObjectTypeRequest?: PatchedInspectionObjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObjectType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypePartialUpdate(id, patchedInspectionObjectTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObjectType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypeRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionobjecttypeUpdate(id: number, inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionObjectType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionobjecttypeUpdate(id, inspectionObjectTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionobjecttypeApi.inspectionobjecttypeUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionobjecttypeApi - factory interface
 * @export
 */
export const InspectionobjecttypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionobjecttypeApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeCreate(inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: any): AxiosPromise<InspectionObjectType> {
            return localVarFp.inspectionobjecttypeCreate(inspectionObjectTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionobjecttypeDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<InspectionObjectType>> {
            return localVarFp.inspectionobjecttypeList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {PatchedInspectionObjectTypeRequest} [patchedInspectionObjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypePartialUpdate(id: number, patchedInspectionObjectTypeRequest?: PatchedInspectionObjectTypeRequest, options?: any): AxiosPromise<InspectionObjectType> {
            return localVarFp.inspectionobjecttypePartialUpdate(id, patchedInspectionObjectTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionObjectType> {
            return localVarFp.inspectionobjecttypeRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection object type.
         * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionobjecttypeUpdate(id: number, inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: any): AxiosPromise<InspectionObjectType> {
            return localVarFp.inspectionobjecttypeUpdate(id, inspectionObjectTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionobjecttypeApi - interface
 * @export
 * @interface InspectionobjecttypeApi
 */
export interface InspectionobjecttypeApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypeCreate(inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObjectType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypeDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypeList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionObjectType>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {PatchedInspectionObjectTypeRequest} [patchedInspectionObjectTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypePartialUpdate(id: number, patchedInspectionObjectTypeRequest?: PatchedInspectionObjectTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObjectType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObjectType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApiInterface
     */
    inspectionobjecttypeUpdate(id: number, inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionObjectType>;

}

/**
 * InspectionobjecttypeApi - object-oriented interface
 * @export
 * @class InspectionobjecttypeApi
 * @extends {BaseAPI}
 */
export class InspectionobjecttypeApi extends BaseAPI implements InspectionobjecttypeApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypeCreate(inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypeCreate(inspectionObjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypeDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypeDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypeList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypeList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {PatchedInspectionObjectTypeRequest} [patchedInspectionObjectTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypePartialUpdate(id: number, patchedInspectionObjectTypeRequest?: PatchedInspectionObjectTypeRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypePartialUpdate(id, patchedInspectionObjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypeRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection object type.
     * @param {InspectionObjectTypeRequest} inspectionObjectTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionobjecttypeApi
     */
    public inspectionobjecttypeUpdate(id: number, inspectionObjectTypeRequest: InspectionObjectTypeRequest, options?: RawAxiosRequestConfig) {
        return InspectionobjecttypeApiFp(this.configuration).inspectionobjecttypeUpdate(id, inspectionObjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionprocessblueprintApi - axios parameter creator
 * @export
 */
export const InspectionprocessblueprintApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintCreate: async (inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionProcessBlueprintRequest' is not null or undefined
            assertParamExists('inspectionprocessblueprintCreate', 'inspectionProcessBlueprintRequest', inspectionProcessBlueprintRequest)
            const localVarPath = `/api/inspectionprocessblueprint/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionProcessBlueprintRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionprocessblueprintDestroy', 'id', id)
            const localVarPath = `/api/inspectionprocessblueprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionprocessblueprint/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {PatchedInspectionProcessBlueprintRequest} [patchedInspectionProcessBlueprintRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintPartialUpdate: async (id: number, patchedInspectionProcessBlueprintRequest?: PatchedInspectionProcessBlueprintRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionprocessblueprintPartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionprocessblueprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionProcessBlueprintRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionprocessblueprintRetrieve', 'id', id)
            const localVarPath = `/api/inspectionprocessblueprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintUpdate: async (id: number, inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionprocessblueprintUpdate', 'id', id)
            // verify required parameter 'inspectionProcessBlueprintRequest' is not null or undefined
            assertParamExists('inspectionprocessblueprintUpdate', 'inspectionProcessBlueprintRequest', inspectionProcessBlueprintRequest)
            const localVarPath = `/api/inspectionprocessblueprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionProcessBlueprintRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionprocessblueprintApi - functional programming interface
 * @export
 */
export const InspectionprocessblueprintApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionprocessblueprintApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionProcessBlueprint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionProcessBlueprint>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {PatchedInspectionProcessBlueprintRequest} [patchedInspectionProcessBlueprintRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintPartialUpdate(id: number, patchedInspectionProcessBlueprintRequest?: PatchedInspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionProcessBlueprint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintPartialUpdate(id, patchedInspectionProcessBlueprintRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionProcessBlueprint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionprocessblueprintUpdate(id: number, inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionProcessBlueprint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionprocessblueprintUpdate(id, inspectionProcessBlueprintRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionprocessblueprintApi.inspectionprocessblueprintUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionprocessblueprintApi - factory interface
 * @export
 */
export const InspectionprocessblueprintApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionprocessblueprintApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: any): AxiosPromise<InspectionProcessBlueprint> {
            return localVarFp.inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionprocessblueprintDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<InspectionProcessBlueprint>> {
            return localVarFp.inspectionprocessblueprintList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {PatchedInspectionProcessBlueprintRequest} [patchedInspectionProcessBlueprintRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintPartialUpdate(id: number, patchedInspectionProcessBlueprintRequest?: PatchedInspectionProcessBlueprintRequest, options?: any): AxiosPromise<InspectionProcessBlueprint> {
            return localVarFp.inspectionprocessblueprintPartialUpdate(id, patchedInspectionProcessBlueprintRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionProcessBlueprint> {
            return localVarFp.inspectionprocessblueprintRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection process blueprint.
         * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionprocessblueprintUpdate(id: number, inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: any): AxiosPromise<InspectionProcessBlueprint> {
            return localVarFp.inspectionprocessblueprintUpdate(id, inspectionProcessBlueprintRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionprocessblueprintApi - interface
 * @export
 * @interface InspectionprocessblueprintApi
 */
export interface InspectionprocessblueprintApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionProcessBlueprint>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionProcessBlueprint>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {PatchedInspectionProcessBlueprintRequest} [patchedInspectionProcessBlueprintRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintPartialUpdate(id: number, patchedInspectionProcessBlueprintRequest?: PatchedInspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionProcessBlueprint>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionProcessBlueprint>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApiInterface
     */
    inspectionprocessblueprintUpdate(id: number, inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionProcessBlueprint>;

}

/**
 * InspectionprocessblueprintApi - object-oriented interface
 * @export
 * @class InspectionprocessblueprintApi
 * @extends {BaseAPI}
 */
export class InspectionprocessblueprintApi extends BaseAPI implements InspectionprocessblueprintApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintCreate(inspectionProcessBlueprintRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {PatchedInspectionProcessBlueprintRequest} [patchedInspectionProcessBlueprintRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintPartialUpdate(id: number, patchedInspectionProcessBlueprintRequest?: PatchedInspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintPartialUpdate(id, patchedInspectionProcessBlueprintRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection process blueprint.
     * @param {InspectionProcessBlueprintRequest} inspectionProcessBlueprintRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionprocessblueprintApi
     */
    public inspectionprocessblueprintUpdate(id: number, inspectionProcessBlueprintRequest: InspectionProcessBlueprintRequest, options?: RawAxiosRequestConfig) {
        return InspectionprocessblueprintApiFp(this.configuration).inspectionprocessblueprintUpdate(id, inspectionProcessBlueprintRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionresultApi - axios parameter creator
 * @export
 */
export const InspectionresultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultCreate: async (inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionresult/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionResultPolymorphicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionresultDestroy', 'id', id)
            const localVarPath = `/api/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspectionresult/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {PatchedInspectionResultPolymorphicRequest} [patchedInspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultPartialUpdate: async (id: number, patchedInspectionResultPolymorphicRequest?: PatchedInspectionResultPolymorphicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionresultPartialUpdate', 'id', id)
            const localVarPath = `/api/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionResultPolymorphicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionresultRetrieve', 'id', id)
            const localVarPath = `/api/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultUpdate: async (id: number, inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionresultUpdate', 'id', id)
            const localVarPath = `/api/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionResultPolymorphicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionresultApi - functional programming interface
 * @export
 */
export const InspectionresultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionresultApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultCreate(inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionResultPolymorphic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultCreate(inspectionResultPolymorphicRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionResultPolymorphic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {PatchedInspectionResultPolymorphicRequest} [patchedInspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultPartialUpdate(id: number, patchedInspectionResultPolymorphicRequest?: PatchedInspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionResultPolymorphic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultPartialUpdate(id, patchedInspectionResultPolymorphicRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionResultPolymorphic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionresultUpdate(id: number, inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionResultPolymorphic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionresultUpdate(id, inspectionResultPolymorphicRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionresultApi.inspectionresultUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionresultApi - factory interface
 * @export
 */
export const InspectionresultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionresultApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultCreate(inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: any): AxiosPromise<InspectionResultPolymorphic> {
            return localVarFp.inspectionresultCreate(inspectionResultPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionresultDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<InspectionResultPolymorphic>> {
            return localVarFp.inspectionresultList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {PatchedInspectionResultPolymorphicRequest} [patchedInspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultPartialUpdate(id: number, patchedInspectionResultPolymorphicRequest?: PatchedInspectionResultPolymorphicRequest, options?: any): AxiosPromise<InspectionResultPolymorphic> {
            return localVarFp.inspectionresultPartialUpdate(id, patchedInspectionResultPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultRetrieve(id: number, fields?: string, options?: any): AxiosPromise<InspectionResultPolymorphic> {
            return localVarFp.inspectionresultRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection result.
         * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionresultUpdate(id: number, inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: any): AxiosPromise<InspectionResultPolymorphic> {
            return localVarFp.inspectionresultUpdate(id, inspectionResultPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionresultApi - interface
 * @export
 * @interface InspectionresultApi
 */
export interface InspectionresultApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultCreate(inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionResultPolymorphic>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionResultPolymorphic>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {PatchedInspectionResultPolymorphicRequest} [patchedInspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultPartialUpdate(id: number, patchedInspectionResultPolymorphicRequest?: PatchedInspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionResultPolymorphic>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<InspectionResultPolymorphic>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApiInterface
     */
    inspectionresultUpdate(id: number, inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionResultPolymorphic>;

}

/**
 * InspectionresultApi - object-oriented interface
 * @export
 * @class InspectionresultApi
 * @extends {BaseAPI}
 */
export class InspectionresultApi extends BaseAPI implements InspectionresultApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultCreate(inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultCreate(inspectionResultPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {PatchedInspectionResultPolymorphicRequest} [patchedInspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultPartialUpdate(id: number, patchedInspectionResultPolymorphicRequest?: PatchedInspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultPartialUpdate(id, patchedInspectionResultPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection result.
     * @param {InspectionResultPolymorphicRequest} [inspectionResultPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionresultApi
     */
    public inspectionresultUpdate(id: number, inspectionResultPolymorphicRequest?: InspectionResultPolymorphicRequest, options?: RawAxiosRequestConfig) {
        return InspectionresultApiFp(this.configuration).inspectionresultUpdate(id, inspectionResultPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MembershipApi - axios parameter creator
 * @export
 */
export const MembershipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipCreate: async (membershipRequest: MembershipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'membershipRequest' is not null or undefined
            assertParamExists('membershipCreate', 'membershipRequest', membershipRequest)
            const localVarPath = `/api/membership/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipDestroy', 'id', id)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/membership/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipRetrieve', 'id', id)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipUpdate: async (id: number, membershipRequest: MembershipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipUpdate', 'id', id)
            // verify required parameter 'membershipRequest' is not null or undefined
            assertParamExists('membershipUpdate', 'membershipRequest', membershipRequest)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipApi - functional programming interface
 * @export
 */
export const MembershipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipApiAxiosParamCreator(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipCreate(membershipRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Membership>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipUpdate(id, membershipRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MembershipApi - factory interface
 * @export
 */
export const MembershipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipApiFp(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipCreate(membershipRequest: MembershipRequest, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipCreate(membershipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.membershipDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipList(options?: any): AxiosPromise<Array<Membership>> {
            return localVarFp.membershipList(options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipRetrieve(id: number, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipUpdate(id, membershipRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembershipApi - interface
 * @export
 * @interface MembershipApi
 */
export interface MembershipApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Membership>>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

}

/**
 * MembershipApi - object-oriented interface
 * @export
 * @class MembershipApi
 * @extends {BaseAPI}
 */
export class MembershipApi extends BaseAPI implements MembershipApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipCreate(membershipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipList(options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipUpdate(id, membershipRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MlApi - axios parameter creator
 * @export
 */
export const MlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultCreate: async (classificationResultRequest: ClassificationResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classificationResultRequest' is not null or undefined
            assertParamExists('mlInspectionresultCreate', 'classificationResultRequest', classificationResultRequest)
            const localVarPath = `/api/ml/inspectionresult/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classificationResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlInspectionresultDestroy', 'id', id)
            const localVarPath = `/api/ml/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultList: async (fields?: string, id?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/inspectionresult/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {PatchedClassificationResultRequest} [patchedClassificationResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultPartialUpdate: async (id: number, patchedClassificationResultRequest?: PatchedClassificationResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlInspectionresultPartialUpdate', 'id', id)
            const localVarPath = `/api/ml/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedClassificationResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlInspectionresultRetrieve', 'id', id)
            const localVarPath = `/api/ml/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultUpdate: async (id: number, classificationResultRequest: ClassificationResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlInspectionresultUpdate', 'id', id)
            // verify required parameter 'classificationResultRequest' is not null or undefined
            assertParamExists('mlInspectionresultUpdate', 'classificationResultRequest', classificationResultRequest)
            const localVarPath = `/api/ml/inspectionresult/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classificationResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelCreate: async (mLModelRequest: MLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mLModelRequest' is not null or undefined
            assertParamExists('mlModelCreate', 'mLModelRequest', mLModelRequest)
            const localVarPath = `/api/ml/model/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelDestroy', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelInference: async (id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelInference', 'id', id)
            // verify required parameter 'azureMLInferenceRequest' is not null or undefined
            assertParamExists('mlModelInference', 'azureMLInferenceRequest', azureMLInferenceRequest)
            const localVarPath = `/api/ml/model/{id}/inference/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(azureMLInferenceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelList: async (fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/model/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelPartialUpdate: async (id: number, patchedMLModelRequest?: PatchedMLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelPartialUpdate', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelRetrieve', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelUpdate: async (id: number, mLModelRequest: MLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelUpdate', 'id', id)
            // verify required parameter 'mLModelRequest' is not null or undefined
            assertParamExists('mlModelUpdate', 'mLModelRequest', mLModelRequest)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeCreate: async (mLModelTypeRequest?: MLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/modeltype/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModeltypeDestroy', 'id', id)
            const localVarPath = `/api/ml/modeltype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeList: async (fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/modeltype/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypePartialUpdate: async (id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModeltypePartialUpdate', 'id', id)
            const localVarPath = `/api/ml/modeltype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModeltypeRetrieve', 'id', id)
            const localVarPath = `/api/ml/modeltype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeUpdate: async (id: number, mLModelTypeRequest?: MLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModeltypeUpdate', 'id', id)
            const localVarPath = `/api/ml/modeltype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MlApi - functional programming interface
 * @export
 */
export const MlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MlApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultCreate(classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultCreate(classificationResultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassificationResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultList(fields, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {PatchedClassificationResultRequest} [patchedClassificationResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultPartialUpdate(id: number, patchedClassificationResultRequest?: PatchedClassificationResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultPartialUpdate(id, patchedClassificationResultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlInspectionresultUpdate(id: number, classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlInspectionresultUpdate(id, classificationResultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlInspectionresultUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelCreate(mLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelInference(id, azureMLInferenceRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelInference']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelList(fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MLModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelList(fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelPartialUpdate(id, patchedMLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelUpdate(id, mLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypeCreate(mLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypeDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypeDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypeDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypeList(fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MLModelType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypeList(fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypeList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypePartialUpdate(id, patchedMLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypeRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModeltypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModeltypeUpdate(id, mLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModeltypeUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MlApi - factory interface
 * @export
 */
export const MlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MlApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultCreate(classificationResultRequest: ClassificationResultRequest, options?: any): AxiosPromise<ClassificationResult> {
            return localVarFp.mlInspectionresultCreate(classificationResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.mlInspectionresultDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultList(fields?: string, id?: Array<number>, options?: any): AxiosPromise<Array<ClassificationResult>> {
            return localVarFp.mlInspectionresultList(fields, id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {PatchedClassificationResultRequest} [patchedClassificationResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultPartialUpdate(id: number, patchedClassificationResultRequest?: PatchedClassificationResultRequest, options?: any): AxiosPromise<ClassificationResult> {
            return localVarFp.mlInspectionresultPartialUpdate(id, patchedClassificationResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ClassificationResult> {
            return localVarFp.mlInspectionresultRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this classification result.
         * @param {ClassificationResultRequest} classificationResultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlInspectionresultUpdate(id: number, classificationResultRequest: ClassificationResultRequest, options?: any): AxiosPromise<ClassificationResult> {
            return localVarFp.mlInspectionresultUpdate(id, classificationResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelCreate(mLModelRequest: MLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelCreate(mLModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.mlModelDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelInference(id, azureMLInferenceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelList(fields?: string, options?: any): AxiosPromise<Array<MLModel>> {
            return localVarFp.mlModelList(fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelPartialUpdate(id, patchedMLModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelRetrieve(id: number, fields?: string, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelUpdate(id, mLModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModeltypeCreate(mLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.mlModeltypeDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeList(fields?: string, options?: any): AxiosPromise<Array<MLModelType>> {
            return localVarFp.mlModeltypeList(fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModeltypePartialUpdate(id, patchedMLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeRetrieve(id: number, fields?: string, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModeltypeRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModeltypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModeltypeUpdate(id, mLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MlApi - interface
 * @export
 * @interface MlApi
 */
export interface MlApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ClassificationResultRequest} classificationResultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultCreate(classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClassificationResult>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassificationResult>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {PatchedClassificationResultRequest} [patchedClassificationResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultPartialUpdate(id: number, patchedClassificationResultRequest?: PatchedClassificationResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClassificationResult>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ClassificationResult>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {ClassificationResultRequest} classificationResultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlInspectionresultUpdate(id: number, classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClassificationResult>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelList(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MLModel>>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypeDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypeList(fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MLModelType>>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModeltypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

}

/**
 * MlApi - object-oriented interface
 * @export
 * @class MlApi
 * @extends {BaseAPI}
 */
export class MlApi extends BaseAPI implements MlApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ClassificationResultRequest} classificationResultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultCreate(classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultCreate(classificationResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultList(fields?: string, id?: Array<number>, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultList(fields, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {PatchedClassificationResultRequest} [patchedClassificationResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultPartialUpdate(id: number, patchedClassificationResultRequest?: PatchedClassificationResultRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultPartialUpdate(id, patchedClassificationResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this classification result.
     * @param {ClassificationResultRequest} classificationResultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlInspectionresultUpdate(id: number, classificationResultRequest: ClassificationResultRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlInspectionresultUpdate(id, classificationResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelCreate(mLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelInference(id, azureMLInferenceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelList(fields?: string, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelList(fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelPartialUpdate(id, patchedMLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelUpdate(id, mLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypeCreate(mLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypeDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypeDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypeList(fields?: string, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypeList(fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypePartialUpdate(id, patchedMLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypeRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModeltypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModeltypeUpdate(id, mLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamCreate: async (teamRequest: TeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('teamCreate', 'teamRequest', teamRequest)
            const localVarPath = `/api/team/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamDestroy', 'id', id)
            const localVarPath = `/api/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/team/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamRetrieve', 'id', id)
            const localVarPath = `/api/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamUpdate: async (id: number, teamRequest: TeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamUpdate', 'id', id)
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('teamUpdate', 'teamRequest', teamRequest)
            const localVarPath = `/api/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamCreate(teamRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamApi.teamCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamApi.teamDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamApi.teamList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamApi.teamRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamUpdate(id, teamRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamApi.teamUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamCreate(teamRequest: TeamRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.teamCreate(teamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.teamDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamList(options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.teamList(options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamRetrieve(id: number, options?: any): AxiosPromise<Team> {
            return localVarFp.teamRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamUpdate(id: number, teamRequest: TeamRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.teamUpdate(id, teamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - interface
 * @export
 * @interface TeamApi
 */
export interface TeamApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Team>>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI implements TeamApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamCreate(teamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamDestroy(id: number, options?: RawAxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamList(options?: RawAxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamUpdate(id, teamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEmailList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWhoamiRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/whoami/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEmailList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEmailList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userEmailList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWhoamiRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWhoamiRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userWhoamiRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEmailList(options?: any): AxiosPromise<Array<EmailAddress>> {
            return localVarFp.userEmailList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWhoamiRetrieve(options?: any): AxiosPromise<CustomUser> {
            return localVarFp.userWhoamiRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * Get all email addresses associated with the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userEmailList(options?: RawAxiosRequestConfig): AxiosPromise<Array<EmailAddress>>;

    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userWhoamiRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<CustomUser>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * Get all email addresses associated with the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userEmailList(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userEmailList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userWhoamiRetrieve(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userWhoamiRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



