/* tslint:disable */
/* eslint-disable */
/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Serializer for Azure ML inference requests. This corresponds to the schema of the request body that Azure ML expects. See https://learn.microsoft.com/en-us/azure/machine-learning/how-to-deploy-mlflow-models?view=azureml-api-2&tabs=azureml#input-structure
 * @export
 * @interface AzureMLInferenceRequest
 */
export interface AzureMLInferenceRequest {
    /**
     * 
     * @type {any}
     * @memberof AzureMLInferenceRequest
     */
    'input_data': any;
    /**
     * 
     * @type {any}
     * @memberof AzureMLInferenceRequest
     */
    'params'?: any;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BlankEnum = {
    Empty: ''
} as const;

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


/**
 * 
 * @export
 * @interface ConfigurationType
 */
export interface ConfigurationType {
    /**
     * 
     * @type {number}
     * @memberof ConfigurationType
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationType
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationType
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationType
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationType
     */
    'quality_criteria'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationType
     */
    'product_category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfigurationType
     */
    'image_attribute_categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationType
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationType
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ConfigurationTypeRequest
 */
export interface ConfigurationTypeRequest {
    /**
     * 
     * @type {number}
     * @memberof ConfigurationTypeRequest
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationTypeRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationTypeRequest
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationTypeRequest
     */
    'quality_criteria'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationTypeRequest
     */
    'product_category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfigurationTypeRequest
     */
    'image_attribute_categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationTypeRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CustomUser
 */
export interface CustomUser {
    /**
     * 
     * @type {number}
     * @memberof CustomUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface CustomUserRequest
 */
export interface CustomUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomUserRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface EmailAddress
 */
export interface EmailAddress {
    /**
     * 
     * @type {number}
     * @memberof EmailAddress
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EmailAddress
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    'verified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    'primary'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EmailAddress
     */
    'user': number;
}
/**
 * * `image/png` - png * `image/tiff` - tiff * `image/jpeg` - jpeg * `image/bmp` - bmp
 * @export
 * @enum {string}
 */

export const FormatEnum = {
    Png: 'image/png',
    Tiff: 'image/tiff',
    Jpeg: 'image/jpeg',
    Bmp: 'image/bmp'
} as const;

export type FormatEnum = typeof FormatEnum[keyof typeof FormatEnum];


/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'inspection'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Image
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'updated_at': string | null;
    /**
     * 
     * @type {FormatEnum}
     * @memberof Image
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'capture_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof Image
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface ImageAttribute
 */
export interface ImageAttribute {
    /**
     * 
     * @type {number}
     * @memberof ImageAttribute
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ImageAttribute
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ImageAttribute
     */
    'category': number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageAttribute
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ImageAttribute
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageAttribute
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageAttribute
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ImageAttributeCategory
 */
export interface ImageAttributeCategory {
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeCategory
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeCategory
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategory
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategory
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategory
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategory
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeCategory
     */
    'ml_model'?: number | null;
}
/**
 * 
 * @export
 * @interface ImageAttributeCategoryRequest
 */
export interface ImageAttributeCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeCategoryRequest
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategoryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeCategoryRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeCategoryRequest
     */
    'ml_model'?: number | null;
}
/**
 * 
 * @export
 * @interface ImageAttributeRequest
 */
export interface ImageAttributeRequest {
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ImageAttributeRequest
     */
    'category': number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageAttributeRequest
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ImageAttributeRequest
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ImageRequest
 */
export interface ImageRequest {
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'inspection'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ImageRequest
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {FormatEnum}
     * @memberof ImageRequest
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'capture_datetime': string;
    /**
     * 
     * @type {File}
     * @memberof ImageRequest
     */
    'file': File;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof ImageRequest
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface Inspection
 */
export interface Inspection {
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'product'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Inspection
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Inspection
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Inspection
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Inspection
     */
    'open_datetime': string | null;
    /**
     * 
     * @type {string}
     * @memberof Inspection
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'configuration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Inspection
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface InspectionImagesStatistics
 */
export interface InspectionImagesStatistics {
    /**
     * 
     * @type {number}
     * @memberof InspectionImagesStatistics
     */
    'total_images': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionImagesStatistics
     */
    'images_to_inspect': number;
}
/**
 * 
 * @export
 * @interface InspectionImagesStatisticsRequest
 */
export interface InspectionImagesStatisticsRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionImagesStatisticsRequest
     */
    'total_images': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionImagesStatisticsRequest
     */
    'images_to_inspect': number;
}
/**
 * 
 * @export
 * @interface InspectionRequest
 */
export interface InspectionRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'product'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof InspectionRequest
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InspectionRequest
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'configuration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InspectionRequest
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface InspectionStatistics
 */
export interface InspectionStatistics {
    /**
     * 
     * @type {number}
     * @memberof InspectionStatistics
     */
    'total_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatistics
     */
    'closed_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatistics
     */
    'opened_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatistics
     */
    'validation_requests': number;
}
/**
 * 
 * @export
 * @interface InspectionStatisticsRequest
 */
export interface InspectionStatisticsRequest {
    /**
     * 
     * @type {number}
     * @memberof InspectionStatisticsRequest
     */
    'total_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatisticsRequest
     */
    'closed_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatisticsRequest
     */
    'opened_inspections': number;
    /**
     * 
     * @type {number}
     * @memberof InspectionStatisticsRequest
     */
    'validation_requests': number;
}
/**
 * 
 * @export
 * @interface InspectionStatus
 */
export interface InspectionStatus {
    /**
     * 
     * @type {number}
     * @memberof InspectionStatus
     */
    'id': number;
    /**
     * 
     * @type {InspectionStatusEnum}
     * @memberof InspectionStatus
     */
    'inspection_status': InspectionStatusEnum;
}


/**
 * * `NONE` - None * `OK` - Ok * `DEFECT` - Defect
 * @export
 * @enum {string}
 */

export const InspectionStatusEnum = {
    None: 'NONE',
    Ok: 'OK',
    Defect: 'DEFECT'
} as const;

export type InspectionStatusEnum = typeof InspectionStatusEnum[keyof typeof InspectionStatusEnum];


/**
 * 
 * @export
 * @interface InspectionValidationStatus
 */
export interface InspectionValidationStatus {
    /**
     * 
     * @type {number}
     * @memberof InspectionValidationStatus
     */
    'id': number;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof InspectionValidationStatus
     */
    'validation_status': ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface MLModel
 */
export interface MLModel {
    /**
     * 
     * @type {number}
     * @memberof MLModel
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MLModel
     */
    'model': number;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModel
     */
    'url'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MLModel
     */
    'teams': Array<number>;
}
/**
 * 
 * @export
 * @interface MLModelRequest
 */
export interface MLModelRequest {
    /**
     * 
     * @type {any}
     * @memberof MLModelRequest
     */
    'headers': any;
    /**
     * 
     * @type {number}
     * @memberof MLModelRequest
     */
    'model': number;
    /**
     * 
     * @type {string}
     * @memberof MLModelRequest
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelRequest
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface MLModelType
 */
export interface MLModelType {
    /**
     * 
     * @type {number}
     * @memberof MLModelType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelType
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface MLModelTypeRequest
 */
export interface MLModelTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MLModelTypeRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    'id': number;
    /**
     * 
     * @type {CustomUser}
     * @memberof Membership
     */
    'user': CustomUser;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'role': string;
    /**
     * 
     * @type {number}
     * @memberof Membership
     */
    'team': number;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface MembershipRequest
 */
export interface MembershipRequest {
    /**
     * 
     * @type {string}
     * @memberof MembershipRequest
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Metadata
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    'schema': number;
    /**
     * 
     * @type {any}
     * @memberof Metadata
     */
    'data'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof Metadata
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Metadata
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface MetadataRequest
 */
export interface MetadataRequest {
    /**
     * 
     * @type {number}
     * @memberof MetadataRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof MetadataRequest
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof MetadataRequest
     */
    'schema': number;
    /**
     * 
     * @type {any}
     * @memberof MetadataRequest
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface MetadataSchema
 */
export interface MetadataSchema {
    /**
     * 
     * @type {number}
     * @memberof MetadataSchema
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MetadataSchema
     */
    'team': number;
    /**
     * 
     * @type {any}
     * @memberof MetadataSchema
     */
    'json': any;
    /**
     * 
     * @type {string}
     * @memberof MetadataSchema
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MetadataSchema
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface MetadataSchemaRequest
 */
export interface MetadataSchemaRequest {
    /**
     * 
     * @type {number}
     * @memberof MetadataSchemaRequest
     */
    'team': number;
    /**
     * 
     * @type {any}
     * @memberof MetadataSchemaRequest
     */
    'json': any;
}
/**
 * 
 * @export
 * @interface PaginatedConfigurationTypeList
 */
export interface PaginatedConfigurationTypeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedConfigurationTypeList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedConfigurationTypeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedConfigurationTypeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ConfigurationType>}
     * @memberof PaginatedConfigurationTypeList
     */
    'results'?: Array<ConfigurationType>;
}
/**
 * 
 * @export
 * @interface PaginatedImageAttributeCategoryList
 */
export interface PaginatedImageAttributeCategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedImageAttributeCategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageAttributeCategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageAttributeCategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ImageAttributeCategory>}
     * @memberof PaginatedImageAttributeCategoryList
     */
    'results'?: Array<ImageAttributeCategory>;
}
/**
 * 
 * @export
 * @interface PaginatedImageAttributeList
 */
export interface PaginatedImageAttributeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedImageAttributeList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageAttributeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageAttributeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ImageAttribute>}
     * @memberof PaginatedImageAttributeList
     */
    'results'?: Array<ImageAttribute>;
}
/**
 * 
 * @export
 * @interface PaginatedImageList
 */
export interface PaginatedImageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedImageList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedImageList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Image>}
     * @memberof PaginatedImageList
     */
    'results'?: Array<Image>;
}
/**
 * 
 * @export
 * @interface PaginatedInspectionImagesStatisticsList
 */
export interface PaginatedInspectionImagesStatisticsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInspectionImagesStatisticsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionImagesStatisticsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionImagesStatisticsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<InspectionImagesStatistics>}
     * @memberof PaginatedInspectionImagesStatisticsList
     */
    'results'?: Array<InspectionImagesStatistics>;
}
/**
 * 
 * @export
 * @interface PaginatedInspectionList
 */
export interface PaginatedInspectionList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInspectionList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Inspection>}
     * @memberof PaginatedInspectionList
     */
    'results'?: Array<Inspection>;
}
/**
 * 
 * @export
 * @interface PaginatedInspectionStatisticsList
 */
export interface PaginatedInspectionStatisticsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInspectionStatisticsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionStatisticsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionStatisticsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<InspectionStatistics>}
     * @memberof PaginatedInspectionStatisticsList
     */
    'results'?: Array<InspectionStatistics>;
}
/**
 * 
 * @export
 * @interface PaginatedInspectionStatusList
 */
export interface PaginatedInspectionStatusList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInspectionStatusList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionStatusList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionStatusList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<InspectionStatus>}
     * @memberof PaginatedInspectionStatusList
     */
    'results'?: Array<InspectionStatus>;
}
/**
 * 
 * @export
 * @interface PaginatedInspectionValidationStatusList
 */
export interface PaginatedInspectionValidationStatusList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInspectionValidationStatusList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionValidationStatusList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInspectionValidationStatusList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<InspectionValidationStatus>}
     * @memberof PaginatedInspectionValidationStatusList
     */
    'results'?: Array<InspectionValidationStatus>;
}
/**
 * 
 * @export
 * @interface PaginatedMLModelList
 */
export interface PaginatedMLModelList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMLModelList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMLModelList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMLModelList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MLModel>}
     * @memberof PaginatedMLModelList
     */
    'results'?: Array<MLModel>;
}
/**
 * 
 * @export
 * @interface PaginatedMLModelTypeList
 */
export interface PaginatedMLModelTypeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMLModelTypeList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMLModelTypeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMLModelTypeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MLModelType>}
     * @memberof PaginatedMLModelTypeList
     */
    'results'?: Array<MLModelType>;
}
/**
 * 
 * @export
 * @interface PaginatedMembershipList
 */
export interface PaginatedMembershipList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMembershipList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMembershipList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMembershipList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Membership>}
     * @memberof PaginatedMembershipList
     */
    'results'?: Array<Membership>;
}
/**
 * 
 * @export
 * @interface PaginatedMetadataList
 */
export interface PaginatedMetadataList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMetadataList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMetadataList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMetadataList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Metadata>}
     * @memberof PaginatedMetadataList
     */
    'results'?: Array<Metadata>;
}
/**
 * 
 * @export
 * @interface PaginatedMetadataSchemaList
 */
export interface PaginatedMetadataSchemaList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMetadataSchemaList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMetadataSchemaList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMetadataSchemaList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MetadataSchema>}
     * @memberof PaginatedMetadataSchemaList
     */
    'results'?: Array<MetadataSchema>;
}
/**
 * 
 * @export
 * @interface PaginatedProductCategoryList
 */
export interface PaginatedProductCategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProductCategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductCategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductCategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof PaginatedProductCategoryList
     */
    'results'?: Array<ProductCategory>;
}
/**
 * 
 * @export
 * @interface PaginatedProductList
 */
export interface PaginatedProductList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProductList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProductList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof PaginatedProductList
     */
    'results'?: Array<Product>;
}
/**
 * 
 * @export
 * @interface PaginatedQualityCriteriaList
 */
export interface PaginatedQualityCriteriaList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedQualityCriteriaList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedQualityCriteriaList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedQualityCriteriaList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<QualityCriteria>}
     * @memberof PaginatedQualityCriteriaList
     */
    'results'?: Array<QualityCriteria>;
}
/**
 * 
 * @export
 * @interface PaginatedQualityCriteriaResultList
 */
export interface PaginatedQualityCriteriaResultList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedQualityCriteriaResultList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedQualityCriteriaResultList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedQualityCriteriaResultList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<QualityCriteriaResult>}
     * @memberof PaginatedQualityCriteriaResultList
     */
    'results'?: Array<QualityCriteriaResult>;
}
/**
 * 
 * @export
 * @interface PaginatedResultList
 */
export interface PaginatedResultList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedResultList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResultList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResultList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Result>}
     * @memberof PaginatedResultList
     */
    'results'?: Array<Result>;
}
/**
 * 
 * @export
 * @interface PaginatedTeamList
 */
export interface PaginatedTeamList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedTeamList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTeamList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTeamList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Team>}
     * @memberof PaginatedTeamList
     */
    'results'?: Array<Team>;
}
/**
 * 
 * @export
 * @interface PatchedConfigurationTypeRequest
 */
export interface PatchedConfigurationTypeRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedConfigurationTypeRequest
     */
    'team'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedConfigurationTypeRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedConfigurationTypeRequest
     */
    'metadata_schema'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedConfigurationTypeRequest
     */
    'quality_criteria'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedConfigurationTypeRequest
     */
    'product_category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedConfigurationTypeRequest
     */
    'image_attribute_categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedConfigurationTypeRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PatchedImageAttributeCategoryRequest
 */
export interface PatchedImageAttributeCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedImageAttributeCategoryRequest
     */
    'team'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageAttributeCategoryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageAttributeCategoryRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageAttributeCategoryRequest
     */
    'ml_model'?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedImageAttributeRequest
 */
export interface PatchedImageAttributeRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedImageAttributeRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageAttributeRequest
     */
    'category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedImageAttributeRequest
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageAttributeRequest
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface PatchedImageRequest
 */
export interface PatchedImageRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'inspection'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedImageRequest
     */
    'uploaded_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedImageRequest
     */
    'results'?: Array<number>;
    /**
     * 
     * @type {FormatEnum}
     * @memberof PatchedImageRequest
     */
    'format'?: FormatEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageRequest
     */
    'capture_datetime'?: string;
    /**
     * 
     * @type {File}
     * @memberof PatchedImageRequest
     */
    'file'?: File;
    /**
     * 
     * @type {string}
     * @memberof PatchedImageRequest
     */
    'part_id'?: string;
    /**
     * 
     * @type {ValidationStatusEnum}
     * @memberof PatchedImageRequest
     */
    'validation_status'?: ValidationStatusEnum;
}


/**
 * 
 * @export
 * @interface PatchedInspectionRequest
 */
export interface PatchedInspectionRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'product'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'opened_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'closed_by'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedInspectionRequest
     */
    'images'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedInspectionRequest
     */
    'close_datetime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'configuration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedInspectionRequest
     */
    'metadata'?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedMLModelRequest
 */
export interface PatchedMLModelRequest {
    /**
     * 
     * @type {any}
     * @memberof PatchedMLModelRequest
     */
    'headers'?: any;
    /**
     * 
     * @type {number}
     * @memberof PatchedMLModelRequest
     */
    'model'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelRequest
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelRequest
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedMLModelTypeRequest
 */
export interface PatchedMLModelTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMLModelTypeRequest
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedMetadataRequest
 */
export interface PatchedMetadataRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMetadataRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedMetadataRequest
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PatchedMetadataRequest
     */
    'schema'?: number;
    /**
     * 
     * @type {any}
     * @memberof PatchedMetadataRequest
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface PatchedMetadataSchemaRequest
 */
export interface PatchedMetadataSchemaRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMetadataSchemaRequest
     */
    'team'?: number;
    /**
     * 
     * @type {any}
     * @memberof PatchedMetadataSchemaRequest
     */
    'json'?: any;
}
/**
 * 
 * @export
 * @interface PatchedProductCategoryRequest
 */
export interface PatchedProductCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedProductCategoryRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedProductCategoryRequest
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductCategoryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductCategoryRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductCategoryRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PatchedProductRequest
 */
export interface PatchedProductRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedProductRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedProductRequest
     */
    'category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedProductRequest
     */
    'inspections'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedProductRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PatchedQualityCriteriaRequest
 */
export interface PatchedQualityCriteriaRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedQualityCriteriaRequest
     */
    'team'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedQualityCriteriaRequest
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedQualityCriteriaRequest
     */
    'good_quality_classes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedQualityCriteriaRequest
     */
    'uncertain_quality_classes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedQualityCriteriaRequest
     */
    'bad_quality_classes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PatchedResultRequest
 */
export interface PatchedResultRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedResultRequest
     */
    'team'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedResultRequest
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedResultRequest
     */
    'image_attributes'?: Array<number>;
    /**
     * 
     * @type {PatchedResultRequestStatus}
     * @memberof PatchedResultRequest
     */
    'status'?: PatchedResultRequestStatus;
    /**
     * 
     * @type {string}
     * @memberof PatchedResultRequest
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedResultRequest
     */
    'comment'?: string;
}
/**
 * @type PatchedResultRequestStatus
 * @export
 */
export type PatchedResultRequestStatus = BlankEnum | StatusEnum;

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Product
     */
    'inspections'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProductCategory
 */
export interface ProductCategory {
    /**
     * 
     * @type {number}
     * @memberof ProductCategory
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductCategory
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProductCategory
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProductCategoryRequest
 */
export interface ProductCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProductCategoryRequest
     */
    'instances'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProductRequest
 */
export interface ProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ProductRequest
     */
    'category'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProductRequest
     */
    'inspections'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface QualityCriteria
 */
export interface QualityCriteria {
    /**
     * 
     * @type {number}
     * @memberof QualityCriteria
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof QualityCriteria
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof QualityCriteria
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteria
     */
    'good_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteria
     */
    'uncertain_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteria
     */
    'bad_quality_classes': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof QualityCriteria
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof QualityCriteria
     */
    'updated_at': string | null;
}
/**
 * 
 * @export
 * @interface QualityCriteriaRequest
 */
export interface QualityCriteriaRequest {
    /**
     * 
     * @type {number}
     * @memberof QualityCriteriaRequest
     */
    'team': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof QualityCriteriaRequest
     */
    'configurations'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteriaRequest
     */
    'good_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteriaRequest
     */
    'uncertain_quality_classes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof QualityCriteriaRequest
     */
    'bad_quality_classes': Array<string>;
}
/**
 * 
 * @export
 * @interface QualityCriteriaResult
 */
export interface QualityCriteriaResult {
    /**
     * 
     * @type {number}
     * @memberof QualityCriteriaResult
     */
    'id': number;
    /**
     * 
     * @type {QualityEnum}
     * @memberof QualityCriteriaResult
     */
    'quality': QualityEnum;
    /**
     * 
     * @type {number}
     * @memberof QualityCriteriaResult
     */
    'quality_criteria': number;
}


/**
 * * `GOOD` - GOOD * `UNCERTAIN` - UNCERTAIN * `BAD` - BAD
 * @export
 * @enum {string}
 */

export const QualityEnum = {
    Good: 'GOOD',
    Uncertain: 'UNCERTAIN',
    Bad: 'BAD'
} as const;

export type QualityEnum = typeof QualityEnum[keyof typeof QualityEnum];


/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'image'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Result
     */
    'image_attributes'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    'updated_at': string | null;
    /**
     * 
     * @type {PatchedResultRequestStatus}
     * @memberof Result
     */
    'status'?: PatchedResultRequestStatus;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ResultRequest
 */
export interface ResultRequest {
    /**
     * 
     * @type {number}
     * @memberof ResultRequest
     */
    'team': number;
    /**
     * 
     * @type {number}
     * @memberof ResultRequest
     */
    'reported_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ResultRequest
     */
    'inferred_by'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ResultRequest
     */
    'image'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ResultRequest
     */
    'image_attributes'?: Array<number>;
    /**
     * 
     * @type {PatchedResultRequestStatus}
     * @memberof ResultRequest
     */
    'status'?: PatchedResultRequestStatus;
    /**
     * 
     * @type {string}
     * @memberof ResultRequest
     */
    'failure_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultRequest
     */
    'comment'?: string;
}
/**
 * * `PENDING` - Pending * `FAILED` - Failed * `SUCCESS` - Success
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Pending: 'PENDING',
    Failed: 'FAILED',
    Success: 'SUCCESS'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'updated_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'customer'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'subscription'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Team
     */
    'members': Array<number>;
}
/**
 * 
 * @export
 * @interface TeamRequest
 */
export interface TeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof TeamRequest
     */
    'customer'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TeamRequest
     */
    'subscription'?: number | null;
}
/**
 * 
 * @export
 * @interface UserAPIKeyCreate
 */
export interface UserAPIKeyCreate {
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'created': string;
    /**
     * A free-form name for the API key. Need not be unique. 50 characters max.
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'name'?: string;
    /**
     * Once API key expires, clients cannot use it anymore.
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'expiry_date': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserAPIKeyCreate
     */
    'revoked': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserAPIKeyCreate
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UserAPIKeyCreateRequest
 */
export interface UserAPIKeyCreateRequest {
    /**
     * A free-form name for the API key. Need not be unique. 50 characters max.
     * @type {string}
     * @memberof UserAPIKeyCreateRequest
     */
    'name'?: string;
}
/**
 * * `NONE` - None * `REQUESTED` - Validation Requested * `VALIDATED` - Validated
 * @export
 * @enum {string}
 */

export const ValidationStatusEnum = {
    None: 'NONE',
    Requested: 'REQUESTED',
    Validated: 'VALIDATED'
} as const;

export type ValidationStatusEnum = typeof ValidationStatusEnum[keyof typeof ValidationStatusEnum];



/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export const ApiKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new API key for the current user.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysCreate: async (userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/keys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAPIKeyCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysRevokeCreate: async (userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/keys/revoke/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAPIKeyCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export const ApiKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new API key for the current user.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAPIKeyCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysCreate(userAPIKeyCreateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiKeysApi.keysCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysRevokeCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAPIKeyCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysRevokeCreate(userAPIKeyCreateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiKeysApi.keysRevokeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ApiKeysApi - factory interface
 * @export
 */
export const ApiKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeysApiFp(configuration)
    return {
        /**
         * Create a new API key for the current user.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: any): AxiosPromise<UserAPIKeyCreate> {
            return localVarFp.keysCreate(userAPIKeyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
         * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysRevokeCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: any): AxiosPromise<UserAPIKeyCreate> {
            return localVarFp.keysRevokeCreate(userAPIKeyCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiKeysApi - interface
 * @export
 * @interface ApiKeysApi
 */
export interface ApiKeysApiInterface {
    /**
     * Create a new API key for the current user.
     * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    keysCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAPIKeyCreate>;

    /**
     * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
     * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiInterface
     */
    keysRevokeCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAPIKeyCreate>;

}

/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export class ApiKeysApi extends BaseAPI implements ApiKeysApiInterface {
    /**
     * Create a new API key for the current user.
     * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public keysCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).keysCreate(userAPIKeyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke an API key for the current user. We use the name of the API Key to revoke it, not the ID or actual key to prevent information leakage.
     * @param {UserAPIKeyCreateRequest} [userAPIKeyCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public keysRevokeCreate(userAPIKeyCreateRequest?: UserAPIKeyCreateRequest, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).keysRevokeCreate(userAPIKeyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConfigurationApi - axios parameter creator
 * @export
 */
export const ConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationCreate: async (configurationTypeRequest: ConfigurationTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configurationTypeRequest' is not null or undefined
            assertParamExists('configurationCreate', 'configurationTypeRequest', configurationTypeRequest)
            const localVarPath = `/api/configuration/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurationTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurationDestroy', 'id', id)
            const localVarPath = `/api/configuration/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/configuration/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationPartialUpdate: async (id: number, patchedConfigurationTypeRequest?: PatchedConfigurationTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurationPartialUpdate', 'id', id)
            const localVarPath = `/api/configuration/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedConfigurationTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurationRetrieve', 'id', id)
            const localVarPath = `/api/configuration/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationUpdate: async (id: number, configurationTypeRequest: ConfigurationTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurationUpdate', 'id', id)
            // verify required parameter 'configurationTypeRequest' is not null or undefined
            assertParamExists('configurationUpdate', 'configurationTypeRequest', configurationTypeRequest)
            const localVarPath = `/api/configuration/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurationTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationApi - functional programming interface
 * @export
 */
export const ConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationCreate(configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationCreate(configurationTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedConfigurationTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationPartialUpdate(id: number, patchedConfigurationTypeRequest?: PatchedConfigurationTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationPartialUpdate(id, patchedConfigurationTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationUpdate(id: number, configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationUpdate(id, configurationTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConfigurationApi.configurationUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConfigurationApi - factory interface
 * @export
 */
export const ConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurationApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationCreate(configurationTypeRequest: ConfigurationTypeRequest, options?: any): AxiosPromise<ConfigurationType> {
            return localVarFp.configurationCreate(configurationTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.configurationDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedConfigurationTypeList> {
            return localVarFp.configurationList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationPartialUpdate(id: number, patchedConfigurationTypeRequest?: PatchedConfigurationTypeRequest, options?: any): AxiosPromise<ConfigurationType> {
            return localVarFp.configurationPartialUpdate(id, patchedConfigurationTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ConfigurationType> {
            return localVarFp.configurationRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this configuration.
         * @param {ConfigurationTypeRequest} configurationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationUpdate(id: number, configurationTypeRequest: ConfigurationTypeRequest, options?: any): AxiosPromise<ConfigurationType> {
            return localVarFp.configurationUpdate(id, configurationTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurationApi - interface
 * @export
 * @interface ConfigurationApi
 */
export interface ConfigurationApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ConfigurationTypeRequest} configurationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationCreate(configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfigurationType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedConfigurationTypeList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationPartialUpdate(id: number, patchedConfigurationTypeRequest?: PatchedConfigurationTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfigurationType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ConfigurationType>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {ConfigurationTypeRequest} configurationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationUpdate(id: number, configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfigurationType>;

}

/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
export class ConfigurationApi extends BaseAPI implements ConfigurationApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ConfigurationTypeRequest} configurationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationCreate(configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationCreate(configurationTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationPartialUpdate(id: number, patchedConfigurationTypeRequest?: PatchedConfigurationTypeRequest, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationPartialUpdate(id, patchedConfigurationTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this configuration.
     * @param {ConfigurationTypeRequest} configurationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationUpdate(id: number, configurationTypeRequest: ConfigurationTypeRequest, options?: RawAxiosRequestConfig) {
        return ConfigurationApiFp(this.configuration).configurationUpdate(id, configurationTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [inspection] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [results] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate: async (team: number, captureDatetime: string, file: File, inspection?: number | null, uploadedBy?: number | null, results?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            assertParamExists('imageCreate', 'team', team)
            // verify required parameter 'captureDatetime' is not null or undefined
            assertParamExists('imageCreate', 'captureDatetime', captureDatetime)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('imageCreate', 'file', file)
            const localVarPath = `/api/image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


            if (team !== undefined) { 
                localVarFormParams.append('team', team as any);
            }
    
            if (inspection !== undefined) { 
                localVarFormParams.append('inspection', inspection as any);
            }
    
            if (uploadedBy !== undefined) { 
                localVarFormParams.append('uploaded_by', uploadedBy as any);
            }
                if (results) {
                localVarFormParams.append('results', results.join(COLLECTION_FORMATS.csv));
            }

    
            if (format !== undefined) { 
                localVarFormParams.append('format', format as any);
            }
    
            if (captureDatetime !== undefined) { 
                localVarFormParams.append('capture_datetime', captureDatetime as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (partId !== undefined) { 
                localVarFormParams.append('part_id', partId as any);
            }
    
            if (validationStatus !== undefined) { 
                localVarFormParams.append('validation_status', validationStatus as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageDestroy', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspectionStatusList: async (id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/inspection_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePartialUpdate: async (id: number, patchedImageRequest?: PatchedImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imagePartialUpdate', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageQualityList: async (id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/quality/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageRetrieve', 'id', id)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUpdate: async (id: number, imageRequest: ImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageUpdate', 'id', id)
            // verify required parameter 'imageRequest' is not null or undefined
            assertParamExists('imageUpdate', 'imageRequest', imageRequest)
            const localVarPath = `/api/image/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [inspection] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [results] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCreate(team: number, captureDatetime: string, file: File, inspection?: number | null, uploadedBy?: number | null, results?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCreate(team, captureDatetime, file, inspection, uploadedBy, results, format, partId, validationStatus, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageInspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionStatusList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageInspectionStatusList(id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageInspectionStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedImageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePartialUpdate(id, patchedImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imagePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageQualityList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQualityCriteriaResultList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageQualityList(id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageQualityList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageUpdate(id, imageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageApi.imageUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} team 
         * @param {string} captureDatetime 
         * @param {File} file 
         * @param {number | null} [inspection] 
         * @param {number | null} [uploadedBy] 
         * @param {Array<number>} [results] 
         * @param {FormatEnum} [format] 
         * @param {string} [partId] 
         * @param {ValidationStatusEnum} [validationStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(team: number, captureDatetime: string, file: File, inspection?: number | null, uploadedBy?: number | null, results?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: any): AxiosPromise<Image> {
            return localVarFp.imageCreate(team, captureDatetime, file, inspection, uploadedBy, results, format, partId, validationStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.imageDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionStatusList> {
            return localVarFp.imageInspectionStatusList(id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedImageList> {
            return localVarFp.imageList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {PatchedImageRequest} [patchedImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: any): AxiosPromise<Image> {
            return localVarFp.imagePartialUpdate(id, patchedImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageQualityList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedQualityCriteriaResultList> {
            return localVarFp.imageQualityList(id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Image> {
            return localVarFp.imageRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image.
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUpdate(id: number, imageRequest: ImageRequest, options?: any): AxiosPromise<Image> {
            return localVarFp.imageUpdate(id, imageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - interface
 * @export
 * @interface ImageApi
 */
export interface ImageApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} team 
     * @param {string} captureDatetime 
     * @param {File} file 
     * @param {number | null} [inspection] 
     * @param {number | null} [uploadedBy] 
     * @param {Array<number>} [results] 
     * @param {FormatEnum} [format] 
     * @param {string} [partId] 
     * @param {ValidationStatusEnum} [validationStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageCreate(team: number, captureDatetime: string, file: File, inspection?: number | null, uploadedBy?: number | null, results?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageInspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionStatusList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedImageList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {PatchedImageRequest} [patchedImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageQualityList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedQualityCriteriaResultList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {ImageRequest} imageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Image>;

}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI implements ImageApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} team 
     * @param {string} captureDatetime 
     * @param {File} file 
     * @param {number | null} [inspection] 
     * @param {number | null} [uploadedBy] 
     * @param {Array<number>} [results] 
     * @param {FormatEnum} [format] 
     * @param {string} [partId] 
     * @param {ValidationStatusEnum} [validationStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCreate(team: number, captureDatetime: string, file: File, inspection?: number | null, uploadedBy?: number | null, results?: Array<number>, format?: FormatEnum, partId?: string, validationStatus?: ValidationStatusEnum, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCreate(team, captureDatetime, file, inspection, uploadedBy, results, format, partId, validationStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageInspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageInspectionStatusList(id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {PatchedImageRequest} [patchedImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePartialUpdate(id: number, patchedImageRequest?: PatchedImageRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePartialUpdate(id, patchedImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageQualityList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageQualityList(id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image.
     * @param {ImageRequest} imageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageUpdate(id: number, imageRequest: ImageRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageUpdate(id, imageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageAttributeApi - axios parameter creator
 * @export
 */
export const ImageAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCreate: async (imageAttributeRequest: ImageAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageAttributeRequest' is not null or undefined
            assertParamExists('imageAttributeCreate', 'imageAttributeRequest', imageAttributeRequest)
            const localVarPath = `/api/image-attribute/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageAttributeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeDestroy', 'id', id)
            const localVarPath = `/api/image-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image-attribute/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {PatchedImageAttributeRequest} [patchedImageAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributePartialUpdate: async (id: number, patchedImageAttributeRequest?: PatchedImageAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributePartialUpdate', 'id', id)
            const localVarPath = `/api/image-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageAttributeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeRetrieve', 'id', id)
            const localVarPath = `/api/image-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeUpdate: async (id: number, imageAttributeRequest: ImageAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeUpdate', 'id', id)
            // verify required parameter 'imageAttributeRequest' is not null or undefined
            assertParamExists('imageAttributeUpdate', 'imageAttributeRequest', imageAttributeRequest)
            const localVarPath = `/api/image-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageAttributeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageAttributeApi - functional programming interface
 * @export
 */
export const ImageAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCreate(imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCreate(imageAttributeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributeDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedImageAttributeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributeList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {PatchedImageAttributeRequest} [patchedImageAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributePartialUpdate(id: number, patchedImageAttributeRequest?: PatchedImageAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributePartialUpdate(id, patchedImageAttributeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeUpdate(id: number, imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeUpdate(id, imageAttributeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeApi.imageAttributeUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImageAttributeApi - factory interface
 * @export
 */
export const ImageAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageAttributeApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCreate(imageAttributeRequest: ImageAttributeRequest, options?: any): AxiosPromise<ImageAttribute> {
            return localVarFp.imageAttributeCreate(imageAttributeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.imageAttributeDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedImageAttributeList> {
            return localVarFp.imageAttributeList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {PatchedImageAttributeRequest} [patchedImageAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributePartialUpdate(id: number, patchedImageAttributeRequest?: PatchedImageAttributeRequest, options?: any): AxiosPromise<ImageAttribute> {
            return localVarFp.imageAttributePartialUpdate(id, patchedImageAttributeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ImageAttribute> {
            return localVarFp.imageAttributeRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute.
         * @param {ImageAttributeRequest} imageAttributeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeUpdate(id: number, imageAttributeRequest: ImageAttributeRequest, options?: any): AxiosPromise<ImageAttribute> {
            return localVarFp.imageAttributeUpdate(id, imageAttributeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageAttributeApi - interface
 * @export
 * @interface ImageAttributeApi
 */
export interface ImageAttributeApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageAttributeRequest} imageAttributeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributeCreate(imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttribute>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributeDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributeList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedImageAttributeList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {PatchedImageAttributeRequest} [patchedImageAttributeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributePartialUpdate(id: number, patchedImageAttributeRequest?: PatchedImageAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttribute>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttribute>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {ImageAttributeRequest} imageAttributeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApiInterface
     */
    imageAttributeUpdate(id: number, imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttribute>;

}

/**
 * ImageAttributeApi - object-oriented interface
 * @export
 * @class ImageAttributeApi
 * @extends {BaseAPI}
 */
export class ImageAttributeApi extends BaseAPI implements ImageAttributeApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageAttributeRequest} imageAttributeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributeCreate(imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributeCreate(imageAttributeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributeDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributeDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributeList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributeList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {PatchedImageAttributeRequest} [patchedImageAttributeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributePartialUpdate(id: number, patchedImageAttributeRequest?: PatchedImageAttributeRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributePartialUpdate(id, patchedImageAttributeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributeRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributeRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute.
     * @param {ImageAttributeRequest} imageAttributeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeApi
     */
    public imageAttributeUpdate(id: number, imageAttributeRequest: ImageAttributeRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeApiFp(this.configuration).imageAttributeUpdate(id, imageAttributeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageAttributeCategoryApi - axios parameter creator
 * @export
 */
export const ImageAttributeCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryCreate: async (imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageAttributeCategoryRequest' is not null or undefined
            assertParamExists('imageAttributeCategoryCreate', 'imageAttributeCategoryRequest', imageAttributeCategoryRequest)
            const localVarPath = `/api/image-attribute-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageAttributeCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeCategoryDestroy', 'id', id)
            const localVarPath = `/api/image-attribute-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image-attribute-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {PatchedImageAttributeCategoryRequest} [patchedImageAttributeCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryPartialUpdate: async (id: number, patchedImageAttributeCategoryRequest?: PatchedImageAttributeCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeCategoryPartialUpdate', 'id', id)
            const localVarPath = `/api/image-attribute-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageAttributeCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeCategoryRetrieve', 'id', id)
            const localVarPath = `/api/image-attribute-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryUpdate: async (id: number, imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('imageAttributeCategoryUpdate', 'id', id)
            // verify required parameter 'imageAttributeCategoryRequest' is not null or undefined
            assertParamExists('imageAttributeCategoryUpdate', 'imageAttributeCategoryRequest', imageAttributeCategoryRequest)
            const localVarPath = `/api/image-attribute-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageAttributeCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageAttributeCategoryApi - functional programming interface
 * @export
 */
export const ImageAttributeCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageAttributeCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryCreate(imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttributeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryCreate(imageAttributeCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedImageAttributeCategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {PatchedImageAttributeCategoryRequest} [patchedImageAttributeCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryPartialUpdate(id: number, patchedImageAttributeCategoryRequest?: PatchedImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttributeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryPartialUpdate(id, patchedImageAttributeCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttributeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAttributeCategoryUpdate(id: number, imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttributeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAttributeCategoryUpdate(id, imageAttributeCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImageAttributeCategoryApi.imageAttributeCategoryUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImageAttributeCategoryApi - factory interface
 * @export
 */
export const ImageAttributeCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageAttributeCategoryApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryCreate(imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: any): AxiosPromise<ImageAttributeCategory> {
            return localVarFp.imageAttributeCategoryCreate(imageAttributeCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.imageAttributeCategoryDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedImageAttributeCategoryList> {
            return localVarFp.imageAttributeCategoryList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {PatchedImageAttributeCategoryRequest} [patchedImageAttributeCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryPartialUpdate(id: number, patchedImageAttributeCategoryRequest?: PatchedImageAttributeCategoryRequest, options?: any): AxiosPromise<ImageAttributeCategory> {
            return localVarFp.imageAttributeCategoryPartialUpdate(id, patchedImageAttributeCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ImageAttributeCategory> {
            return localVarFp.imageAttributeCategoryRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this image attribute category.
         * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAttributeCategoryUpdate(id: number, imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: any): AxiosPromise<ImageAttributeCategory> {
            return localVarFp.imageAttributeCategoryUpdate(id, imageAttributeCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageAttributeCategoryApi - interface
 * @export
 * @interface ImageAttributeCategoryApi
 */
export interface ImageAttributeCategoryApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryCreate(imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttributeCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedImageAttributeCategoryList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {PatchedImageAttributeCategoryRequest} [patchedImageAttributeCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryPartialUpdate(id: number, patchedImageAttributeCategoryRequest?: PatchedImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttributeCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttributeCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApiInterface
     */
    imageAttributeCategoryUpdate(id: number, imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageAttributeCategory>;

}

/**
 * ImageAttributeCategoryApi - object-oriented interface
 * @export
 * @class ImageAttributeCategoryApi
 * @extends {BaseAPI}
 */
export class ImageAttributeCategoryApi extends BaseAPI implements ImageAttributeCategoryApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryCreate(imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryCreate(imageAttributeCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {PatchedImageAttributeCategoryRequest} [patchedImageAttributeCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryPartialUpdate(id: number, patchedImageAttributeCategoryRequest?: PatchedImageAttributeCategoryRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryPartialUpdate(id, patchedImageAttributeCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this image attribute category.
     * @param {ImageAttributeCategoryRequest} imageAttributeCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageAttributeCategoryApi
     */
    public imageAttributeCategoryUpdate(id: number, imageAttributeCategoryRequest: ImageAttributeCategoryRequest, options?: RawAxiosRequestConfig) {
        return ImageAttributeCategoryApiFp(this.configuration).imageAttributeCategoryUpdate(id, imageAttributeCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InspectionApi - axios parameter creator
 * @export
 */
export const InspectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionCreate: async (inspectionRequest: InspectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionRequest' is not null or undefined
            assertParamExists('inspectionCreate', 'inspectionRequest', inspectionRequest)
            const localVarPath = `/api/inspection/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionDestroy', 'id', id)
            const localVarPath = `/api/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspection/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {PatchedInspectionRequest} [patchedInspectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionPartialUpdate: async (id: number, patchedInspectionRequest?: PatchedInspectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionPartialUpdate', 'id', id)
            const localVarPath = `/api/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedInspectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionRetrieve', 'id', id)
            const localVarPath = `/api/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionSendValidationEmailRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionSendValidationEmailRetrieve', 'id', id)
            const localVarPath = `/api/inspection/{id}/send_validation_email/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionStatusList: async (id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspection/status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionUpdate: async (id: number, inspectionRequest: InspectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inspectionUpdate', 'id', id)
            // verify required parameter 'inspectionRequest' is not null or undefined
            assertParamExists('inspectionUpdate', 'inspectionRequest', inspectionRequest)
            const localVarPath = `/api/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionValidationStatusList: async (id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inspection/validation_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionApi - functional programming interface
 * @export
 */
export const InspectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionCreate(inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inspection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionCreate(inspectionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {PatchedInspectionRequest} [patchedInspectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionPartialUpdate(id: number, patchedInspectionRequest?: PatchedInspectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inspection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionPartialUpdate(id, patchedInspectionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inspection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inspection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionSendValidationEmailRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionSendValidationEmailRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionStatusList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionStatusList(id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionUpdate(id: number, inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inspection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionUpdate(id, inspectionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inspectionValidationStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionValidationStatusList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inspectionValidationStatusList(id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InspectionApi.inspectionValidationStatusList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InspectionApi - factory interface
 * @export
 */
export const InspectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionCreate(inspectionRequest: InspectionRequest, options?: any): AxiosPromise<Inspection> {
            return localVarFp.inspectionCreate(inspectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.inspectionDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionList> {
            return localVarFp.inspectionList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {PatchedInspectionRequest} [patchedInspectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionPartialUpdate(id: number, patchedInspectionRequest?: PatchedInspectionRequest, options?: any): AxiosPromise<Inspection> {
            return localVarFp.inspectionPartialUpdate(id, patchedInspectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Inspection> {
            return localVarFp.inspectionRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionSendValidationEmailRetrieve(id: number, options?: any): AxiosPromise<Inspection> {
            return localVarFp.inspectionSendValidationEmailRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionStatusList> {
            return localVarFp.inspectionStatusList(id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionRequest} inspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionUpdate(id: number, inspectionRequest: InspectionRequest, options?: any): AxiosPromise<Inspection> {
            return localVarFp.inspectionUpdate(id, inspectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inspectionValidationStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionValidationStatusList> {
            return localVarFp.inspectionValidationStatusList(id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InspectionApi - interface
 * @export
 * @interface InspectionApi
 */
export interface InspectionApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionRequest} inspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionCreate(inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Inspection>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {PatchedInspectionRequest} [patchedInspectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionPartialUpdate(id: number, patchedInspectionRequest?: PatchedInspectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Inspection>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Inspection>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Inspection>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionStatusList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {InspectionRequest} inspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionUpdate(id: number, inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Inspection>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiInterface
     */
    inspectionValidationStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionValidationStatusList>;

}

/**
 * InspectionApi - object-oriented interface
 * @export
 * @class InspectionApi
 * @extends {BaseAPI}
 */
export class InspectionApi extends BaseAPI implements InspectionApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {InspectionRequest} inspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionCreate(inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionCreate(inspectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionDestroy(id: number, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {PatchedInspectionRequest} [patchedInspectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionPartialUpdate(id: number, patchedInspectionRequest?: PatchedInspectionRequest, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionPartialUpdate(id, patchedInspectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionSendValidationEmailRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionSendValidationEmailRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionStatusList(id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this inspection.
     * @param {InspectionRequest} inspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionUpdate(id: number, inspectionRequest: InspectionRequest, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionUpdate(id, inspectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApi
     */
    public inspectionValidationStatusList(id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return InspectionApiFp(this.configuration).inspectionValidationStatusList(id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MembershipApi - axios parameter creator
 * @export
 */
export const MembershipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipCreate: async (membershipRequest: MembershipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'membershipRequest' is not null or undefined
            assertParamExists('membershipCreate', 'membershipRequest', membershipRequest)
            const localVarPath = `/api/membership/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipDestroy', 'id', id)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/membership/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipRetrieve', 'id', id)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipUpdate: async (id: number, membershipRequest: MembershipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membershipUpdate', 'id', id)
            // verify required parameter 'membershipRequest' is not null or undefined
            assertParamExists('membershipUpdate', 'membershipRequest', membershipRequest)
            const localVarPath = `/api/membership/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipApi - functional programming interface
 * @export
 */
export const MembershipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipApiAxiosParamCreator(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipCreate(membershipRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMembershipList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membershipUpdate(id, membershipRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembershipApi.membershipUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MembershipApi - factory interface
 * @export
 */
export const MembershipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipApiFp(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipCreate(membershipRequest: MembershipRequest, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipCreate(membershipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.membershipDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedMembershipList> {
            return localVarFp.membershipList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipRetrieve(id: number, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this membership.
         * @param {MembershipRequest} membershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: any): AxiosPromise<Membership> {
            return localVarFp.membershipUpdate(id, membershipRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembershipApi - interface
 * @export
 * @interface MembershipApi
 */
export interface MembershipApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMembershipList>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApiInterface
     */
    membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig): AxiosPromise<Membership>;

}

/**
 * MembershipApi - object-oriented interface
 * @export
 * @class MembershipApi
 * @extends {BaseAPI}
 */
export class MembershipApi extends BaseAPI implements MembershipApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipCreate(membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipCreate(membershipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this membership.
     * @param {MembershipRequest} membershipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipApi
     */
    public membershipUpdate(id: number, membershipRequest: MembershipRequest, options?: RawAxiosRequestConfig) {
        return MembershipApiFp(this.configuration).membershipUpdate(id, membershipRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataCreate: async (metadataRequest: MetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataRequest' is not null or undefined
            assertParamExists('metadataCreate', 'metadataRequest', metadataRequest)
            const localVarPath = `/api/metadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataDestroy', 'id', id)
            const localVarPath = `/api/metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {PatchedMetadataRequest} [patchedMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataPartialUpdate: async (id: number, patchedMetadataRequest?: PatchedMetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataPartialUpdate', 'id', id)
            const localVarPath = `/api/metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataRetrieve', 'id', id)
            const localVarPath = `/api/metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataUpdate: async (id: number, metadataRequest: MetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataUpdate', 'id', id)
            // verify required parameter 'metadataRequest' is not null or undefined
            assertParamExists('metadataUpdate', 'metadataRequest', metadataRequest)
            const localVarPath = `/api/metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataCreate(metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataCreate(metadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMetadataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {PatchedMetadataRequest} [patchedMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataPartialUpdate(id: number, patchedMetadataRequest?: PatchedMetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataPartialUpdate(id, patchedMetadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataUpdate(id: number, metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataUpdate(id, metadataRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataApi.metadataUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataCreate(metadataRequest: MetadataRequest, options?: any): AxiosPromise<Metadata> {
            return localVarFp.metadataCreate(metadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.metadataDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedMetadataList> {
            return localVarFp.metadataList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {PatchedMetadataRequest} [patchedMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataPartialUpdate(id: number, patchedMetadataRequest?: PatchedMetadataRequest, options?: any): AxiosPromise<Metadata> {
            return localVarFp.metadataPartialUpdate(id, patchedMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Metadata> {
            return localVarFp.metadataRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata.
         * @param {MetadataRequest} metadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataUpdate(id: number, metadataRequest: MetadataRequest, options?: any): AxiosPromise<Metadata> {
            return localVarFp.metadataUpdate(id, metadataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {MetadataRequest} metadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataCreate(metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMetadataList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {PatchedMetadataRequest} [patchedMetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataPartialUpdate(id: number, patchedMetadataRequest?: PatchedMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Metadata>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {MetadataRequest} metadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    metadataUpdate(id: number, metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metadata>;

}

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI implements MetadataApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {MetadataRequest} metadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataCreate(metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataCreate(metadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {PatchedMetadataRequest} [patchedMetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataPartialUpdate(id: number, patchedMetadataRequest?: PatchedMetadataRequest, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataPartialUpdate(id, patchedMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata.
     * @param {MetadataRequest} metadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataUpdate(id: number, metadataRequest: MetadataRequest, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataUpdate(id, metadataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetadataSchemaApi - axios parameter creator
 * @export
 */
export const MetadataSchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaCreate: async (metadataSchemaRequest: MetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataSchemaRequest' is not null or undefined
            assertParamExists('metadataSchemaCreate', 'metadataSchemaRequest', metadataSchemaRequest)
            const localVarPath = `/api/metadata-schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataSchemaDestroy', 'id', id)
            const localVarPath = `/api/metadata-schema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metadata-schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaPartialUpdate: async (id: number, patchedMetadataSchemaRequest?: PatchedMetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataSchemaPartialUpdate', 'id', id)
            const localVarPath = `/api/metadata-schema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMetadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataSchemaRetrieve', 'id', id)
            const localVarPath = `/api/metadata-schema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaUpdate: async (id: number, metadataSchemaRequest: MetadataSchemaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataSchemaUpdate', 'id', id)
            // verify required parameter 'metadataSchemaRequest' is not null or undefined
            assertParamExists('metadataSchemaUpdate', 'metadataSchemaRequest', metadataSchemaRequest)
            const localVarPath = `/api/metadata-schema/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metadataSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataSchemaApi - functional programming interface
 * @export
 */
export const MetadataSchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataSchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaCreate(metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaCreate(metadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMetadataSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaPartialUpdate(id: number, patchedMetadataSchemaRequest?: PatchedMetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaPartialUpdate(id, patchedMetadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSchemaUpdate(id: number, metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSchemaUpdate(id, metadataSchemaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetadataSchemaApi.metadataSchemaUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MetadataSchemaApi - factory interface
 * @export
 */
export const MetadataSchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataSchemaApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaCreate(metadataSchemaRequest: MetadataSchemaRequest, options?: any): AxiosPromise<MetadataSchema> {
            return localVarFp.metadataSchemaCreate(metadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.metadataSchemaDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedMetadataSchemaList> {
            return localVarFp.metadataSchemaList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaPartialUpdate(id: number, patchedMetadataSchemaRequest?: PatchedMetadataSchemaRequest, options?: any): AxiosPromise<MetadataSchema> {
            return localVarFp.metadataSchemaPartialUpdate(id, patchedMetadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaRetrieve(id: number, fields?: string, options?: any): AxiosPromise<MetadataSchema> {
            return localVarFp.metadataSchemaRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this metadata schema.
         * @param {MetadataSchemaRequest} metadataSchemaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSchemaUpdate(id: number, metadataSchemaRequest: MetadataSchemaRequest, options?: any): AxiosPromise<MetadataSchema> {
            return localVarFp.metadataSchemaUpdate(id, metadataSchemaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataSchemaApi - interface
 * @export
 * @interface MetadataSchemaApi
 */
export interface MetadataSchemaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {MetadataSchemaRequest} metadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaCreate(metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMetadataSchemaList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaPartialUpdate(id: number, patchedMetadataSchemaRequest?: PatchedMetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<MetadataSchema>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {MetadataSchemaRequest} metadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApiInterface
     */
    metadataSchemaUpdate(id: number, metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetadataSchema>;

}

/**
 * MetadataSchemaApi - object-oriented interface
 * @export
 * @class MetadataSchemaApi
 * @extends {BaseAPI}
 */
export class MetadataSchemaApi extends BaseAPI implements MetadataSchemaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {MetadataSchemaRequest} metadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaCreate(metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaCreate(metadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaPartialUpdate(id: number, patchedMetadataSchemaRequest?: PatchedMetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaPartialUpdate(id, patchedMetadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this metadata schema.
     * @param {MetadataSchemaRequest} metadataSchemaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataSchemaApi
     */
    public metadataSchemaUpdate(id: number, metadataSchemaRequest: MetadataSchemaRequest, options?: RawAxiosRequestConfig) {
        return MetadataSchemaApiFp(this.configuration).metadataSchemaUpdate(id, metadataSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MlApi - axios parameter creator
 * @export
 */
export const MlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelCreate: async (mLModelRequest: MLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mLModelRequest' is not null or undefined
            assertParamExists('mlModelCreate', 'mLModelRequest', mLModelRequest)
            const localVarPath = `/api/ml/model/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelDestroy', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelInference: async (id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelInference', 'id', id)
            // verify required parameter 'azureMLInferenceRequest' is not null or undefined
            assertParamExists('mlModelInference', 'azureMLInferenceRequest', azureMLInferenceRequest)
            const localVarPath = `/api/ml/model/{id}/infer/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(azureMLInferenceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/model/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelPartialUpdate: async (id: number, patchedMLModelRequest?: PatchedMLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelPartialUpdate', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelRetrieve', 'id', id)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeCreate: async (mLModelTypeRequest?: MLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/model-type/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelTypeDestroy', 'id', id)
            const localVarPath = `/api/ml/model-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ml/model-type/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypePartialUpdate: async (id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelTypePartialUpdate', 'id', id)
            const localVarPath = `/api/ml/model-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelTypeRetrieve', 'id', id)
            const localVarPath = `/api/ml/model-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeUpdate: async (id: number, mLModelTypeRequest?: MLModelTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelTypeUpdate', 'id', id)
            const localVarPath = `/api/ml/model-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelUpdate: async (id: number, mLModelRequest: MLModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mlModelUpdate', 'id', id)
            // verify required parameter 'mLModelRequest' is not null or undefined
            assertParamExists('mlModelUpdate', 'mLModelRequest', mLModelRequest)
            const localVarPath = `/api/ml/model/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mLModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MlApi - functional programming interface
 * @export
 */
export const MlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MlApiAxiosParamCreator(configuration)
    return {
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelCreate(mLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelInference(id, azureMLInferenceRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelInference']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMLModelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelPartialUpdate(id, patchedMLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypeCreate(mLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypeDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypeDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypeDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypeList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMLModelTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypeList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypeList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypePartialUpdate(id, patchedMLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypeRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypeRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelTypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModelType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelTypeUpdate(id, mLModelTypeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelTypeUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MLModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mlModelUpdate(id, mLModelRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MlApi.mlModelUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MlApi - factory interface
 * @export
 */
export const MlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MlApiFp(configuration)
    return {
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelCreate(mLModelRequest: MLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelCreate(mLModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.mlModelDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelInference(id, azureMLInferenceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedMLModelList> {
            return localVarFp.mlModelList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelPartialUpdate(id, patchedMLModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelRetrieve(id: number, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModelTypeCreate(mLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.mlModelTypeDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedMLModelTypeList> {
            return localVarFp.mlModelTypeList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModelTypePartialUpdate(id, patchedMLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeRetrieve(id: number, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModelTypeRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ml model type.
         * @param {MLModelTypeRequest} [mLModelTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelTypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: any): AxiosPromise<MLModelType> {
            return localVarFp.mlModelTypeUpdate(id, mLModelTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
         * @param {number} id A unique integer value identifying this ml model.
         * @param {MLModelRequest} mLModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: any): AxiosPromise<MLModel> {
            return localVarFp.mlModelUpdate(id, mLModelRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MlApi - interface
 * @export
 * @interface MlApi
 */
export interface MlApiInterface {
    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMLModelList>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

    /**
     * 
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypeDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypeList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMLModelTypeList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypeRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelTypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModelType>;

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApiInterface
     */
    mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MLModel>;

}

/**
 * MlApi - object-oriented interface
 * @export
 * @class MlApi
 * @extends {BaseAPI}
 */
export class MlApi extends BaseAPI implements MlApiInterface {
    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelCreate(mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelCreate(mLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Infer a result from the model. This is a passthrough to the model\'s inference endpoint running somewhere else. The request body is passed through to the model.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {AzureMLInferenceRequest} azureMLInferenceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelInference(id: number, azureMLInferenceRequest: AzureMLInferenceRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelInference(id, azureMLInferenceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {PatchedMLModelRequest} [patchedMLModelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelPartialUpdate(id: number, patchedMLModelRequest?: PatchedMLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelPartialUpdate(id, patchedMLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypeCreate(mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypeCreate(mLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypeDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypeDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypeList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypeList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {PatchedMLModelTypeRequest} [patchedMLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypePartialUpdate(id: number, patchedMLModelTypeRequest?: PatchedMLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypePartialUpdate(id, patchedMLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypeRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypeRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this ml model type.
     * @param {MLModelTypeRequest} [mLModelTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelTypeUpdate(id: number, mLModelTypeRequest?: MLModelTypeRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelTypeUpdate(id, mLModelTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A viewset for ML models. It filters results based on the permissions granted to all the user\'s team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
     * @param {number} id A unique integer value identifying this ml model.
     * @param {MLModelRequest} mLModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public mlModelUpdate(id: number, mLModelRequest: MLModelRequest, options?: RawAxiosRequestConfig) {
        return MlApiFp(this.configuration).mlModelUpdate(id, mLModelRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate: async (productRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productRequest' is not null or undefined
            assertParamExists('productCreate', 'productRequest', productRequest)
            const localVarPath = `/api/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productDestroy', 'id', id)
            const localVarPath = `/api/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [category] Multiple values may be separated by commas.
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList: async (category?: Array<number>, fields?: string, id?: Array<number>, identifier?: Array<string>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/product/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (category) {
                localVarQueryParameter['category'] = category.join(COLLECTION_FORMATS.csv);
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (identifier) {
                localVarQueryParameter['identifier'] = identifier.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProductRequest} [patchedProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPartialUpdate: async (id: number, patchedProductRequest?: PatchedProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productPartialUpdate', 'id', id)
            const localVarPath = `/api/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productRetrieve', 'id', id)
            const localVarPath = `/api/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate: async (id: number, productRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productUpdate', 'id', id)
            // verify required parameter 'productRequest' is not null or undefined
            assertParamExists('productUpdate', 'productRequest', productRequest)
            const localVarPath = `/api/product/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCreate(productRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreate(productRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [category] Multiple values may be separated by commas.
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productList(category?: Array<number>, fields?: string, id?: Array<number>, identifier?: Array<string>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productList(category, fields, id, identifier, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProductRequest} [patchedProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPartialUpdate(id: number, patchedProductRequest?: PatchedProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPartialUpdate(id, patchedProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdate(id: number, productRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdate(id, productRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate(productRequest: ProductRequest, options?: any): AxiosPromise<Product> {
            return localVarFp.productCreate(productRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {Array<number>} [category] Multiple values may be separated by commas.
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {Array<string>} [identifier] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList(category?: Array<number>, fields?: string, id?: Array<number>, identifier?: Array<string>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedProductList> {
            return localVarFp.productList(category, fields, id, identifier, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {PatchedProductRequest} [patchedProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPartialUpdate(id: number, patchedProductRequest?: PatchedProductRequest, options?: any): AxiosPromise<Product> {
            return localVarFp.productPartialUpdate(id, patchedProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Product> {
            return localVarFp.productRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product.
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate(id: number, productRequest: ProductRequest, options?: any): AxiosPromise<Product> {
            return localVarFp.productUpdate(id, productRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - interface
 * @export
 * @interface ProductApi
 */
export interface ProductApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ProductRequest} productRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productCreate(productRequest: ProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [category] Multiple values may be separated by commas.
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {Array<string>} [identifier] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productList(category?: Array<number>, fields?: string, id?: Array<number>, identifier?: Array<string>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedProductList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {PatchedProductRequest} [patchedProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productPartialUpdate(id: number, patchedProductRequest?: PatchedProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Product>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {ProductRequest} productRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productUpdate(id: number, productRequest: ProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product>;

}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI implements ProductApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ProductRequest} productRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreate(productRequest: ProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreate(productRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Array<number>} [category] Multiple values may be separated by commas.
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {Array<string>} [identifier] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productList(category?: Array<number>, fields?: string, id?: Array<number>, identifier?: Array<string>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productList(category, fields, id, identifier, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {PatchedProductRequest} [patchedProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productPartialUpdate(id: number, patchedProductRequest?: PatchedProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productPartialUpdate(id, patchedProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product.
     * @param {ProductRequest} productRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdate(id: number, productRequest: ProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdate(id, productRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductCategoryApi - axios parameter creator
 * @export
 */
export const ProductCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryCreate: async (productCategoryRequest: ProductCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCategoryRequest' is not null or undefined
            assertParamExists('productCategoryCreate', 'productCategoryRequest', productCategoryRequest)
            const localVarPath = `/api/product-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryDestroy', 'id', id)
            const localVarPath = `/api/product-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/product-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {PatchedProductCategoryRequest} [patchedProductCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryPartialUpdate: async (id: number, patchedProductCategoryRequest?: PatchedProductCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryPartialUpdate', 'id', id)
            const localVarPath = `/api/product-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedProductCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryRetrieve', 'id', id)
            const localVarPath = `/api/product-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryUpdate: async (id: number, productCategoryRequest: ProductCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryUpdate', 'id', id)
            // verify required parameter 'productCategoryRequest' is not null or undefined
            assertParamExists('productCategoryUpdate', 'productCategoryRequest', productCategoryRequest)
            const localVarPath = `/api/product-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCategoryApi - functional programming interface
 * @export
 */
export const ProductCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryCreate(productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryCreate(productCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProductCategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {PatchedProductCategoryRequest} [patchedProductCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryPartialUpdate(id: number, patchedProductCategoryRequest?: PatchedProductCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryPartialUpdate(id, patchedProductCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryUpdate(id: number, productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryUpdate(id, productCategoryRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductCategoryApi.productCategoryUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductCategoryApi - factory interface
 * @export
 */
export const ProductCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductCategoryApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryCreate(productCategoryRequest: ProductCategoryRequest, options?: any): AxiosPromise<ProductCategory> {
            return localVarFp.productCategoryCreate(productCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productCategoryDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedProductCategoryList> {
            return localVarFp.productCategoryList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {PatchedProductCategoryRequest} [patchedProductCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryPartialUpdate(id: number, patchedProductCategoryRequest?: PatchedProductCategoryRequest, options?: any): AxiosPromise<ProductCategory> {
            return localVarFp.productCategoryPartialUpdate(id, patchedProductCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryRetrieve(id: number, fields?: string, options?: any): AxiosPromise<ProductCategory> {
            return localVarFp.productCategoryRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this product category.
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryUpdate(id: number, productCategoryRequest: ProductCategoryRequest, options?: any): AxiosPromise<ProductCategory> {
            return localVarFp.productCategoryUpdate(id, productCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductCategoryApi - interface
 * @export
 * @interface ProductCategoryApi
 */
export interface ProductCategoryApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ProductCategoryRequest} productCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryCreate(productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedProductCategoryList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {PatchedProductCategoryRequest} [patchedProductCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryPartialUpdate(id: number, patchedProductCategoryRequest?: PatchedProductCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProductCategory>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {ProductCategoryRequest} productCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApiInterface
     */
    productCategoryUpdate(id: number, productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductCategory>;

}

/**
 * ProductCategoryApi - object-oriented interface
 * @export
 * @class ProductCategoryApi
 * @extends {BaseAPI}
 */
export class ProductCategoryApi extends BaseAPI implements ProductCategoryApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ProductCategoryRequest} productCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryCreate(productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryCreate(productCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {PatchedProductCategoryRequest} [patchedProductCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryPartialUpdate(id: number, patchedProductCategoryRequest?: PatchedProductCategoryRequest, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryPartialUpdate(id, patchedProductCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this product category.
     * @param {ProductCategoryRequest} productCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryUpdate(id: number, productCategoryRequest: ProductCategoryRequest, options?: RawAxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryUpdate(id, productCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QualityCriteriaApi - axios parameter creator
 * @export
 */
export const QualityCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaCreate: async (qualityCriteriaRequest: QualityCriteriaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualityCriteriaRequest' is not null or undefined
            assertParamExists('qualityCriteriaCreate', 'qualityCriteriaRequest', qualityCriteriaRequest)
            const localVarPath = `/api/quality-criteria/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualityCriteriaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityCriteriaDestroy', 'id', id)
            const localVarPath = `/api/quality-criteria/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quality-criteria/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaPartialUpdate: async (id: number, patchedQualityCriteriaRequest?: PatchedQualityCriteriaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityCriteriaPartialUpdate', 'id', id)
            const localVarPath = `/api/quality-criteria/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedQualityCriteriaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityCriteriaRetrieve', 'id', id)
            const localVarPath = `/api/quality-criteria/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaUpdate: async (id: number, qualityCriteriaRequest: QualityCriteriaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('qualityCriteriaUpdate', 'id', id)
            // verify required parameter 'qualityCriteriaRequest' is not null or undefined
            assertParamExists('qualityCriteriaUpdate', 'qualityCriteriaRequest', qualityCriteriaRequest)
            const localVarPath = `/api/quality-criteria/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualityCriteriaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualityCriteriaApi - functional programming interface
 * @export
 */
export const QualityCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualityCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaCreate(qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaCreate(qualityCriteriaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQualityCriteriaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaPartialUpdate(id: number, patchedQualityCriteriaRequest?: PatchedQualityCriteriaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaPartialUpdate(id, patchedQualityCriteriaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityCriteriaUpdate(id: number, qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualityCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.qualityCriteriaUpdate(id, qualityCriteriaRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['QualityCriteriaApi.qualityCriteriaUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * QualityCriteriaApi - factory interface
 * @export
 */
export const QualityCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualityCriteriaApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaCreate(qualityCriteriaRequest: QualityCriteriaRequest, options?: any): AxiosPromise<QualityCriteria> {
            return localVarFp.qualityCriteriaCreate(qualityCriteriaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.qualityCriteriaDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedQualityCriteriaList> {
            return localVarFp.qualityCriteriaList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaPartialUpdate(id: number, patchedQualityCriteriaRequest?: PatchedQualityCriteriaRequest, options?: any): AxiosPromise<QualityCriteria> {
            return localVarFp.qualityCriteriaPartialUpdate(id, patchedQualityCriteriaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaRetrieve(id: number, fields?: string, options?: any): AxiosPromise<QualityCriteria> {
            return localVarFp.qualityCriteriaRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this quality criteria.
         * @param {QualityCriteriaRequest} qualityCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityCriteriaUpdate(id: number, qualityCriteriaRequest: QualityCriteriaRequest, options?: any): AxiosPromise<QualityCriteria> {
            return localVarFp.qualityCriteriaUpdate(id, qualityCriteriaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QualityCriteriaApi - interface
 * @export
 * @interface QualityCriteriaApi
 */
export interface QualityCriteriaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaCreate(qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig): AxiosPromise<QualityCriteria>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedQualityCriteriaList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaPartialUpdate(id: number, patchedQualityCriteriaRequest?: PatchedQualityCriteriaRequest, options?: RawAxiosRequestConfig): AxiosPromise<QualityCriteria>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<QualityCriteria>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApiInterface
     */
    qualityCriteriaUpdate(id: number, qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig): AxiosPromise<QualityCriteria>;

}

/**
 * QualityCriteriaApi - object-oriented interface
 * @export
 * @class QualityCriteriaApi
 * @extends {BaseAPI}
 */
export class QualityCriteriaApi extends BaseAPI implements QualityCriteriaApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaCreate(qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaCreate(qualityCriteriaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaDestroy(id: number, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaPartialUpdate(id: number, patchedQualityCriteriaRequest?: PatchedQualityCriteriaRequest, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaPartialUpdate(id, patchedQualityCriteriaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this quality criteria.
     * @param {QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualityCriteriaApi
     */
    public qualityCriteriaUpdate(id: number, qualityCriteriaRequest: QualityCriteriaRequest, options?: RawAxiosRequestConfig) {
        return QualityCriteriaApiFp(this.configuration).qualityCriteriaUpdate(id, qualityCriteriaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResultApi - axios parameter creator
 * @export
 */
export const ResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultCreate: async (resultRequest: ResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultRequest' is not null or undefined
            assertParamExists('resultCreate', 'resultRequest', resultRequest)
            const localVarPath = `/api/result/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resultDestroy', 'id', id)
            const localVarPath = `/api/result/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultList: async (fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/result/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {PatchedResultRequest} [patchedResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultPartialUpdate: async (id: number, patchedResultRequest?: PatchedResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resultPartialUpdate', 'id', id)
            const localVarPath = `/api/result/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultRetrieve: async (id: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resultRetrieve', 'id', id)
            const localVarPath = `/api/result/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultUpdate: async (id: number, resultRequest: ResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resultUpdate', 'id', id)
            // verify required parameter 'resultRequest' is not null or undefined
            assertParamExists('resultUpdate', 'resultRequest', resultRequest)
            const localVarPath = `/api/result/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultApi - functional programming interface
 * @export
 */
export const ResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultApiAxiosParamCreator(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultCreate(resultRequest: ResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultCreate(resultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultList(fields, id, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {PatchedResultRequest} [patchedResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultPartialUpdate(id: number, patchedResultRequest?: PatchedResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultPartialUpdate(id, patchedResultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultRetrieve(id, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultUpdate(id: number, resultRequest: ResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultUpdate(id, resultRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResultApi.resultUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ResultApi - factory interface
 * @export
 */
export const ResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultApiFp(configuration)
    return {
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultCreate(resultRequest: ResultRequest, options?: any): AxiosPromise<Result> {
            return localVarFp.resultCreate(resultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.resultDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {string} [fields] 
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedResultList> {
            return localVarFp.resultList(fields, id, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {PatchedResultRequest} [patchedResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultPartialUpdate(id: number, patchedResultRequest?: PatchedResultRequest, options?: any): AxiosPromise<Result> {
            return localVarFp.resultPartialUpdate(id, patchedResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultRetrieve(id: number, fields?: string, options?: any): AxiosPromise<Result> {
            return localVarFp.resultRetrieve(id, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
         * @param {number} id A unique integer value identifying this result.
         * @param {ResultRequest} resultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultUpdate(id: number, resultRequest: ResultRequest, options?: any): AxiosPromise<Result> {
            return localVarFp.resultUpdate(id, resultRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResultApi - interface
 * @export
 * @interface ResultApi
 */
export interface ResultApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ResultRequest} resultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultCreate(resultRequest: ResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<Result>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResultList>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {PatchedResultRequest} [patchedResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultPartialUpdate(id: number, patchedResultRequest?: PatchedResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<Result>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig): AxiosPromise<Result>;

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {ResultRequest} resultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApiInterface
     */
    resultUpdate(id: number, resultRequest: ResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<Result>;

}

/**
 * ResultApi - object-oriented interface
 * @export
 * @class ResultApi
 * @extends {BaseAPI}
 */
export class ResultApi extends BaseAPI implements ResultApiInterface {
    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {ResultRequest} resultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultCreate(resultRequest: ResultRequest, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultCreate(resultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {string} [fields] 
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultList(fields?: string, id?: Array<number>, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultList(fields, id, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {PatchedResultRequest} [patchedResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultPartialUpdate(id: number, patchedResultRequest?: PatchedResultRequest, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultPartialUpdate(id, patchedResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultRetrieve(id: number, fields?: string, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultRetrieve(id, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {number} id A unique integer value identifying this result.
     * @param {ResultRequest} resultRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public resultUpdate(id: number, resultRequest: ResultRequest, options?: RawAxiosRequestConfig) {
        return ResultApiFp(this.configuration).resultUpdate(id, resultRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionCreate: async (inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionImagesStatisticsRequest' is not null or undefined
            assertParamExists('statisticsInspectionCreate', 'inspectionImagesStatisticsRequest', inspectionImagesStatisticsRequest)
            const localVarPath = `/api/statistics/inspection/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionImagesStatisticsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsInspectionDestroy', 'id', id)
            const localVarPath = `/api/statistics/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistics/inspection/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsInspectionRetrieve', 'id', id)
            const localVarPath = `/api/statistics/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionUpdate: async (id: number, inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsInspectionUpdate', 'id', id)
            // verify required parameter 'inspectionImagesStatisticsRequest' is not null or undefined
            assertParamExists('statisticsInspectionUpdate', 'inspectionImagesStatisticsRequest', inspectionImagesStatisticsRequest)
            const localVarPath = `/api/statistics/inspection/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionImagesStatisticsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamCreate: async (inspectionStatisticsRequest: InspectionStatisticsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionStatisticsRequest' is not null or undefined
            assertParamExists('statisticsTeamCreate', 'inspectionStatisticsRequest', inspectionStatisticsRequest)
            const localVarPath = `/api/statistics/team/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionStatisticsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsTeamDestroy', 'id', id)
            const localVarPath = `/api/statistics/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistics/team/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsTeamRetrieve', 'id', id)
            const localVarPath = `/api/statistics/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamUpdate: async (id: number, inspectionStatisticsRequest: InspectionStatisticsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statisticsTeamUpdate', 'id', id)
            // verify required parameter 'inspectionStatisticsRequest' is not null or undefined
            assertParamExists('statisticsTeamUpdate', 'inspectionStatisticsRequest', inspectionStatisticsRequest)
            const localVarPath = `/api/statistics/team/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inspectionStatisticsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsInspectionCreate(inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionImagesStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsInspectionCreate(inspectionImagesStatisticsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsInspectionCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsInspectionDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsInspectionDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsInspectionDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsInspectionList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionImagesStatisticsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsInspectionList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsInspectionList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsInspectionRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionImagesStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsInspectionRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsInspectionRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsInspectionUpdate(id: number, inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionImagesStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsInspectionUpdate(id, inspectionImagesStatisticsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsInspectionUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsTeamCreate(inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsTeamCreate(inspectionStatisticsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsTeamCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsTeamDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsTeamDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsTeamDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsTeamList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInspectionStatisticsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsTeamList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsTeamList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsTeamRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsTeamRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsTeamRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsTeamUpdate(id: number, inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsTeamUpdate(id, inspectionStatisticsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatisticsApi.statisticsTeamUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionCreate(inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: any): AxiosPromise<InspectionImagesStatistics> {
            return localVarFp.statisticsInspectionCreate(inspectionImagesStatisticsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.statisticsInspectionDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionImagesStatisticsList> {
            return localVarFp.statisticsInspectionList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionRetrieve(id: number, options?: any): AxiosPromise<InspectionImagesStatistics> {
            return localVarFp.statisticsInspectionRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this image.
         * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsInspectionUpdate(id: number, inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: any): AxiosPromise<InspectionImagesStatistics> {
            return localVarFp.statisticsInspectionUpdate(id, inspectionImagesStatisticsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamCreate(inspectionStatisticsRequest: InspectionStatisticsRequest, options?: any): AxiosPromise<InspectionStatistics> {
            return localVarFp.statisticsTeamCreate(inspectionStatisticsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.statisticsTeamDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedInspectionStatisticsList> {
            return localVarFp.statisticsTeamList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamRetrieve(id: number, options?: any): AxiosPromise<InspectionStatistics> {
            return localVarFp.statisticsTeamRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a Google Partial Response query param like to prune results
         * @param {number} id A unique integer value identifying this inspection.
         * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsTeamUpdate(id: number, inspectionStatisticsRequest: InspectionStatisticsRequest, options?: any): AxiosPromise<InspectionStatistics> {
            return localVarFp.statisticsTeamUpdate(id, inspectionStatisticsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - interface
 * @export
 * @interface StatisticsApi
 */
export interface StatisticsApiInterface {
    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsInspectionCreate(inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionImagesStatistics>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsInspectionDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsInspectionList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionImagesStatisticsList>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsInspectionRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<InspectionImagesStatistics>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsInspectionUpdate(id: number, inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionImagesStatistics>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsTeamCreate(inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionStatistics>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsTeamDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsTeamList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedInspectionStatisticsList>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsTeamRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<InspectionStatistics>;

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsTeamUpdate(id: number, inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionStatistics>;

}

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI implements StatisticsApiInterface {
    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsInspectionCreate(inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsInspectionCreate(inspectionImagesStatisticsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsInspectionDestroy(id: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsInspectionDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsInspectionList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsInspectionList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsInspectionRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsInspectionRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this image.
     * @param {InspectionImagesStatisticsRequest} inspectionImagesStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsInspectionUpdate(id: number, inspectionImagesStatisticsRequest: InspectionImagesStatisticsRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsInspectionUpdate(id, inspectionImagesStatisticsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsTeamCreate(inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsTeamCreate(inspectionStatisticsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsTeamDestroy(id: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsTeamDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsTeamList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsTeamList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsTeamRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsTeamRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a Google Partial Response query param like to prune results
     * @param {number} id A unique integer value identifying this inspection.
     * @param {InspectionStatisticsRequest} inspectionStatisticsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsTeamUpdate(id: number, inspectionStatisticsRequest: InspectionStatisticsRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsTeamUpdate(id, inspectionStatisticsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCreate: async (teamRequest: TeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('teamsCreate', 'teamRequest', teamRequest)
            const localVarPath = `/api/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsDestroy', 'id', id)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsRetrieve', 'id', id)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsUpdate: async (id: number, teamRequest: TeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsUpdate', 'id', id)
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('teamsUpdate', 'teamRequest', teamRequest)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCreate(teamRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.teamsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.teamsDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTeamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsList(page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.teamsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.teamsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsUpdate(id, teamRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.teamsUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCreate(teamRequest: TeamRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.teamsCreate(teamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.teamsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsList(page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedTeamList> {
            return localVarFp.teamsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsRetrieve(id: number, options?: any): AxiosPromise<Team> {
            return localVarFp.teamsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
         * @param {number} id A unique integer value identifying this team.
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsUpdate(id: number, teamRequest: TeamRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.teamsUpdate(id, teamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedTeamList>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<Team>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsCreate(teamRequest: TeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsCreate(teamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A base read-only viewset that enables optimized queryset fetching and tracing.  This is a combination of the following mixins: * OptimizedQuerySetMixin (from drf_jsonmask): allows the client to specify which fields to return by exposing a `fields` query parameter. If this parameter is not specified, all fields are returned. If it is specified, only the specified fields are returned and the other fields are not fetched from the database. * TracedModelViewSetMixin (from vue_instrumentation): adds tracing to the viewset\'s methods. * ListModelMixin, RetrieveModelMixin  (from django-rest-framework): adds a list and retrieve method to the viewset making it read-only.
     * @param {number} id A unique integer value identifying this team.
     * @param {TeamRequest} teamRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsUpdate(id: number, teamRequest: TeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsUpdate(id, teamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEmailList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWhoamiRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/whoami/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEmailList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEmailList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userEmailList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWhoamiRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWhoamiRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userWhoamiRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get all email addresses associated with the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEmailList(options?: any): AxiosPromise<Array<EmailAddress>> {
            return localVarFp.userEmailList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWhoamiRetrieve(options?: any): AxiosPromise<CustomUser> {
            return localVarFp.userWhoamiRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * Get all email addresses associated with the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userEmailList(options?: RawAxiosRequestConfig): AxiosPromise<Array<EmailAddress>>;

    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userWhoamiRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<CustomUser>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * Get all email addresses associated with the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userEmailList(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userEmailList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userWhoamiRetrieve(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userWhoamiRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



