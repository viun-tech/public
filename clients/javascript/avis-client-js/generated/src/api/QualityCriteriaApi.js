/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedQualityCriteriaList from '../model/PaginatedQualityCriteriaList';
import PatchedQualityCriteriaRequest from '../model/PatchedQualityCriteriaRequest';
import QualityCriteria from '../model/QualityCriteria';
import QualityCriteriaRequest from '../model/QualityCriteriaRequest';

/**
* QualityCriteria service.
* @module api/QualityCriteriaApi
* @version 0.8.0
*/
export default class QualityCriteriaApi {

    /**
    * Constructs a new QualityCriteriaApi. 
    * @alias module:api/QualityCriteriaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the qualityCriteriaCreate operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QualityCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {module:model/QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {module:api/QualityCriteriaApi~qualityCriteriaCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QualityCriteria}
     */
    qualityCriteriaCreate(qualityCriteriaRequest, callback) {
      let postBody = qualityCriteriaRequest;
      // verify the required parameter 'qualityCriteriaRequest' is set
      if (qualityCriteriaRequest === undefined || qualityCriteriaRequest === null) {
        throw new Error("Missing the required parameter 'qualityCriteriaRequest' when calling qualityCriteriaCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = QualityCriteria;
      return this.apiClient.callApi(
        '/api/quality-criteria/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityCriteriaDestroy operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this quality criteria.
     * @param {module:api/QualityCriteriaApi~qualityCriteriaDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qualityCriteriaDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qualityCriteriaDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/quality-criteria/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityCriteriaList operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedQualityCriteriaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Object} opts Optional parameters
     * @param {String} [fields] 
     * @param {Array.<Number>} [id] Multiple values may be separated by commas.
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/QualityCriteriaApi~qualityCriteriaListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedQualityCriteriaList}
     */
    qualityCriteriaList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedQualityCriteriaList;
      return this.apiClient.callApi(
        '/api/quality-criteria/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityCriteriaPartialUpdate operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QualityCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this quality criteria.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedQualityCriteriaRequest} [patchedQualityCriteriaRequest] 
     * @param {module:api/QualityCriteriaApi~qualityCriteriaPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QualityCriteria}
     */
    qualityCriteriaPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedQualityCriteriaRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qualityCriteriaPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = QualityCriteria;
      return this.apiClient.callApi(
        '/api/quality-criteria/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityCriteriaRetrieve operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QualityCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this quality criteria.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] 
     * @param {module:api/QualityCriteriaApi~qualityCriteriaRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QualityCriteria}
     */
    qualityCriteriaRetrieve(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qualityCriteriaRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QualityCriteria;
      return this.apiClient.callApi(
        '/api/quality-criteria/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityCriteriaUpdate operation.
     * @callback module:api/QualityCriteriaApi~qualityCriteriaUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QualityCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this quality criteria.
     * @param {module:model/QualityCriteriaRequest} qualityCriteriaRequest 
     * @param {module:api/QualityCriteriaApi~qualityCriteriaUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QualityCriteria}
     */
    qualityCriteriaUpdate(id, qualityCriteriaRequest, callback) {
      let postBody = qualityCriteriaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qualityCriteriaUpdate");
      }
      // verify the required parameter 'qualityCriteriaRequest' is set
      if (qualityCriteriaRequest === undefined || qualityCriteriaRequest === null) {
        throw new Error("Missing the required parameter 'qualityCriteriaRequest' when calling qualityCriteriaUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = QualityCriteria;
      return this.apiClient.callApi(
        '/api/quality-criteria/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
