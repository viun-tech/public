/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import MetadataSchema from "../model/MetadataSchema";
import MetadataSchemaRequest from "../model/MetadataSchemaRequest";
import PaginatedMetadataSchemaList from "../model/PaginatedMetadataSchemaList";
import PatchedMetadataSchemaRequest from "../model/PatchedMetadataSchemaRequest";

/**
 * MetadataSchema service.
 * @module api/MetadataSchemaApi
 * @version 0.8.0
 */
export default class MetadataSchemaApi {
  /**
   * Constructs a new MetadataSchemaApi.
   * @alias module:api/MetadataSchemaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the metadataSchemaCreate operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MetadataSchema} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {module:model/MetadataSchemaRequest} metadataSchemaRequest
   * @param {module:api/MetadataSchemaApi~metadataSchemaCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MetadataSchema}
   */
  metadataSchemaCreate(metadataSchemaRequest, callback) {
    let postBody = metadataSchemaRequest;
    // verify the required parameter 'metadataSchemaRequest' is set
    if (metadataSchemaRequest === undefined || metadataSchemaRequest === null) {
      throw new Error(
        "Missing the required parameter 'metadataSchemaRequest' when calling metadataSchemaCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MetadataSchema;
    return this.apiClient.callApi(
      "/api/metadata-schema/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the metadataSchemaDestroy operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this metadata schema.
   * @param {module:api/MetadataSchemaApi~metadataSchemaDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  metadataSchemaDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling metadataSchemaDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/metadata-schema/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the metadataSchemaList operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedMetadataSchemaList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Object} opts Optional parameters
   * @param {String} [fields]
   * @param {Array.<Number>} [id] Multiple values may be separated by commas.
   * @param {String} [ordering] Which field to use when ordering the results.
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/MetadataSchemaApi~metadataSchemaListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedMetadataSchemaList}
   */
  metadataSchemaList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      fields: opts["fields"],
      id: this.apiClient.buildCollectionParam(opts["id"], "csv"),
      ordering: opts["ordering"],
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedMetadataSchemaList;
    return this.apiClient.callApi(
      "/api/metadata-schema/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the metadataSchemaPartialUpdate operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaPartialUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MetadataSchema} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this metadata schema.
   * @param {Object} opts Optional parameters
   * @param {module:model/PatchedMetadataSchemaRequest} [patchedMetadataSchemaRequest]
   * @param {module:api/MetadataSchemaApi~metadataSchemaPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MetadataSchema}
   */
  metadataSchemaPartialUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["patchedMetadataSchemaRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling metadataSchemaPartialUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MetadataSchema;
    return this.apiClient.callApi(
      "/api/metadata-schema/{id}/",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the metadataSchemaRetrieve operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MetadataSchema} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this metadata schema.
   * @param {Object} opts Optional parameters
   * @param {String} [fields]
   * @param {module:api/MetadataSchemaApi~metadataSchemaRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MetadataSchema}
   */
  metadataSchemaRetrieve(id, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling metadataSchemaRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      fields: opts["fields"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = MetadataSchema;
    return this.apiClient.callApi(
      "/api/metadata-schema/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the metadataSchemaUpdate operation.
   * @callback module:api/MetadataSchemaApi~metadataSchemaUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MetadataSchema} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this metadata schema.
   * @param {module:model/MetadataSchemaRequest} metadataSchemaRequest
   * @param {module:api/MetadataSchemaApi~metadataSchemaUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MetadataSchema}
   */
  metadataSchemaUpdate(id, metadataSchemaRequest, callback) {
    let postBody = metadataSchemaRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling metadataSchemaUpdate",
      );
    }
    // verify the required parameter 'metadataSchemaRequest' is set
    if (metadataSchemaRequest === undefined || metadataSchemaRequest === null) {
      throw new Error(
        "Missing the required parameter 'metadataSchemaRequest' when calling metadataSchemaUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MetadataSchema;
    return this.apiClient.callApi(
      "/api/metadata-schema/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
