/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AzureMLInferenceRequest from "../model/AzureMLInferenceRequest";
import MLModel from "../model/MLModel";
import MLModelRequest from "../model/MLModelRequest";
import MLModelType from "../model/MLModelType";
import MLModelTypeRequest from "../model/MLModelTypeRequest";
import PaginatedMLModelList from "../model/PaginatedMLModelList";
import PaginatedMLModelTypeList from "../model/PaginatedMLModelTypeList";
import PatchedMLModelRequest from "../model/PatchedMLModelRequest";
import PatchedMLModelTypeRequest from "../model/PatchedMLModelTypeRequest";

/**
 * Ml service.
 * @module api/MlApi
 * @version 0.8.0
 */
export default class MlApi {
  /**
   * Constructs a new MlApi.
   * @alias module:api/MlApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the mlModelCreate operation.
   * @callback module:api/MlApi~mlModelCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {module:model/MLModelRequest} mLModelRequest
   * @param {module:api/MlApi~mlModelCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModel}
   */
  mlModelCreate(mLModelRequest, callback) {
    let postBody = mLModelRequest;
    // verify the required parameter 'mLModelRequest' is set
    if (mLModelRequest === undefined || mLModelRequest === null) {
      throw new Error(
        "Missing the required parameter 'mLModelRequest' when calling mlModelCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModel;
    return this.apiClient.callApi(
      "/api/ml/model/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelDestroy operation.
   * @callback module:api/MlApi~mlModelDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {Number} id A unique integer value identifying this ml model.
   * @param {module:api/MlApi~mlModelDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  mlModelDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/ml/model/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelInference operation.
   * @callback module:api/MlApi~mlModelInferenceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Infer a result from the model. This is a passthrough to the model's inference endpoint running somewhere else. The request body is passed through to the model.
   * @param {Number} id A unique integer value identifying this ml model.
   * @param {module:model/AzureMLInferenceRequest} azureMLInferenceRequest
   * @param {module:api/MlApi~mlModelInferenceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModel}
   */
  mlModelInference(id, azureMLInferenceRequest, callback) {
    let postBody = azureMLInferenceRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelInference",
      );
    }
    // verify the required parameter 'azureMLInferenceRequest' is set
    if (
      azureMLInferenceRequest === undefined ||
      azureMLInferenceRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'azureMLInferenceRequest' when calling mlModelInference",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModel;
    return this.apiClient.callApi(
      "/api/ml/model/{id}/infer/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelList operation.
   * @callback module:api/MlApi~mlModelListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedMLModelList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {Object} opts Optional parameters
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/MlApi~mlModelListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedMLModelList}
   */
  mlModelList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedMLModelList;
    return this.apiClient.callApi(
      "/api/ml/model/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelPartialUpdate operation.
   * @callback module:api/MlApi~mlModelPartialUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {Number} id A unique integer value identifying this ml model.
   * @param {Object} opts Optional parameters
   * @param {module:model/PatchedMLModelRequest} [patchedMLModelRequest]
   * @param {module:api/MlApi~mlModelPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModel}
   */
  mlModelPartialUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["patchedMLModelRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelPartialUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModel;
    return this.apiClient.callApi(
      "/api/ml/model/{id}/",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelRetrieve operation.
   * @callback module:api/MlApi~mlModelRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {Number} id A unique integer value identifying this ml model.
   * @param {module:api/MlApi~mlModelRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModel}
   */
  mlModelRetrieve(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = MLModel;
    return this.apiClient.callApi(
      "/api/ml/model/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypeCreate operation.
   * @callback module:api/MlApi~mlModelTypeCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModelType} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/MLModelTypeRequest} [mLModelTypeRequest]
   * @param {module:api/MlApi~mlModelTypeCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModelType}
   */
  mlModelTypeCreate(opts, callback) {
    opts = opts || {};
    let postBody = opts["mLModelTypeRequest"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModelType;
    return this.apiClient.callApi(
      "/api/ml/model-type/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypeDestroy operation.
   * @callback module:api/MlApi~mlModelTypeDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id A unique integer value identifying this ml model type.
   * @param {module:api/MlApi~mlModelTypeDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  mlModelTypeDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelTypeDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/ml/model-type/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypeList operation.
   * @callback module:api/MlApi~mlModelTypeListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedMLModelTypeList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/MlApi~mlModelTypeListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedMLModelTypeList}
   */
  mlModelTypeList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedMLModelTypeList;
    return this.apiClient.callApi(
      "/api/ml/model-type/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypePartialUpdate operation.
   * @callback module:api/MlApi~mlModelTypePartialUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModelType} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id A unique integer value identifying this ml model type.
   * @param {Object} opts Optional parameters
   * @param {module:model/PatchedMLModelTypeRequest} [patchedMLModelTypeRequest]
   * @param {module:api/MlApi~mlModelTypePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModelType}
   */
  mlModelTypePartialUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["patchedMLModelTypeRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelTypePartialUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModelType;
    return this.apiClient.callApi(
      "/api/ml/model-type/{id}/",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypeRetrieve operation.
   * @callback module:api/MlApi~mlModelTypeRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModelType} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id A unique integer value identifying this ml model type.
   * @param {module:api/MlApi~mlModelTypeRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModelType}
   */
  mlModelTypeRetrieve(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelTypeRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = MLModelType;
    return this.apiClient.callApi(
      "/api/ml/model-type/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelTypeUpdate operation.
   * @callback module:api/MlApi~mlModelTypeUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModelType} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id A unique integer value identifying this ml model type.
   * @param {Object} opts Optional parameters
   * @param {module:model/MLModelTypeRequest} [mLModelTypeRequest]
   * @param {module:api/MlApi~mlModelTypeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModelType}
   */
  mlModelTypeUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["mLModelTypeRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelTypeUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModelType;
    return this.apiClient.callApi(
      "/api/ml/model-type/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the mlModelUpdate operation.
   * @callback module:api/MlApi~mlModelUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MLModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A viewset for ML models. It filters results based on the permissions granted to all the user's team(s).  A user will only be able to interact with an ML models if at least one of the teams they are a member of has access to it.
   * @param {Number} id A unique integer value identifying this ml model.
   * @param {module:model/MLModelRequest} mLModelRequest
   * @param {module:api/MlApi~mlModelUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MLModel}
   */
  mlModelUpdate(id, mLModelRequest, callback) {
    let postBody = mLModelRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling mlModelUpdate",
      );
    }
    // verify the required parameter 'mLModelRequest' is set
    if (mLModelRequest === undefined || mLModelRequest === null) {
      throw new Error(
        "Missing the required parameter 'mLModelRequest' when calling mlModelUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = MLModel;
    return this.apiClient.callApi(
      "/api/ml/model/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
