/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Membership from "../model/Membership";
import MembershipRequest from "../model/MembershipRequest";
import PaginatedMembershipList from "../model/PaginatedMembershipList";

/**
 * Membership service.
 * @module api/MembershipApi
 * @version 0.8.0
 */
export default class MembershipApi {
  /**
   * Constructs a new MembershipApi.
   * @alias module:api/MembershipApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the membershipCreate operation.
   * @callback module:api/MembershipApi~membershipCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Membership} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {module:model/MembershipRequest} membershipRequest
   * @param {module:api/MembershipApi~membershipCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Membership}
   */
  membershipCreate(membershipRequest, callback) {
    let postBody = membershipRequest;
    // verify the required parameter 'membershipRequest' is set
    if (membershipRequest === undefined || membershipRequest === null) {
      throw new Error(
        "Missing the required parameter 'membershipRequest' when calling membershipCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Membership;
    return this.apiClient.callApi(
      "/api/membership/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the membershipDestroy operation.
   * @callback module:api/MembershipApi~membershipDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this membership.
   * @param {module:api/MembershipApi~membershipDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  membershipDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling membershipDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/membership/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the membershipList operation.
   * @callback module:api/MembershipApi~membershipListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedMembershipList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Object} opts Optional parameters
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/MembershipApi~membershipListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedMembershipList}
   */
  membershipList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedMembershipList;
    return this.apiClient.callApi(
      "/api/membership/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the membershipRetrieve operation.
   * @callback module:api/MembershipApi~membershipRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Membership} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this membership.
   * @param {module:api/MembershipApi~membershipRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Membership}
   */
  membershipRetrieve(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling membershipRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Membership;
    return this.apiClient.callApi(
      "/api/membership/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the membershipUpdate operation.
   * @callback module:api/MembershipApi~membershipUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Membership} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this membership.
   * @param {module:model/MembershipRequest} membershipRequest
   * @param {module:api/MembershipApi~membershipUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Membership}
   */
  membershipUpdate(id, membershipRequest, callback) {
    let postBody = membershipRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling membershipUpdate",
      );
    }
    // verify the required parameter 'membershipRequest' is set
    if (membershipRequest === undefined || membershipRequest === null) {
      throw new Error(
        "Missing the required parameter 'membershipRequest' when calling membershipUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Membership;
    return this.apiClient.callApi(
      "/api/membership/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
