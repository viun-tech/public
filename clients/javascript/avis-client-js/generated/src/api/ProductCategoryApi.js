/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import PaginatedProductCategoryList from "../model/PaginatedProductCategoryList";
import PatchedProductCategoryRequest from "../model/PatchedProductCategoryRequest";
import ProductCategory from "../model/ProductCategory";
import ProductCategoryRequest from "../model/ProductCategoryRequest";

/**
 * ProductCategory service.
 * @module api/ProductCategoryApi
 * @version 0.8.0
 */
export default class ProductCategoryApi {
  /**
   * Constructs a new ProductCategoryApi.
   * @alias module:api/ProductCategoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the productCategoryCreate operation.
   * @callback module:api/ProductCategoryApi~productCategoryCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProductCategory} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {module:model/ProductCategoryRequest} productCategoryRequest
   * @param {module:api/ProductCategoryApi~productCategoryCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProductCategory}
   */
  productCategoryCreate(productCategoryRequest, callback) {
    let postBody = productCategoryRequest;
    // verify the required parameter 'productCategoryRequest' is set
    if (
      productCategoryRequest === undefined ||
      productCategoryRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'productCategoryRequest' when calling productCategoryCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = ProductCategory;
    return this.apiClient.callApi(
      "/api/product-category/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productCategoryDestroy operation.
   * @callback module:api/ProductCategoryApi~productCategoryDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product category.
   * @param {module:api/ProductCategoryApi~productCategoryDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  productCategoryDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productCategoryDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/product-category/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productCategoryList operation.
   * @callback module:api/ProductCategoryApi~productCategoryListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedProductCategoryList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Object} opts Optional parameters
   * @param {String} [fields]
   * @param {Array.<Number>} [id] Multiple values may be separated by commas.
   * @param {String} [ordering] Which field to use when ordering the results.
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/ProductCategoryApi~productCategoryListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedProductCategoryList}
   */
  productCategoryList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      fields: opts["fields"],
      id: this.apiClient.buildCollectionParam(opts["id"], "csv"),
      ordering: opts["ordering"],
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedProductCategoryList;
    return this.apiClient.callApi(
      "/api/product-category/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productCategoryPartialUpdate operation.
   * @callback module:api/ProductCategoryApi~productCategoryPartialUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProductCategory} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product category.
   * @param {Object} opts Optional parameters
   * @param {module:model/PatchedProductCategoryRequest} [patchedProductCategoryRequest]
   * @param {module:api/ProductCategoryApi~productCategoryPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProductCategory}
   */
  productCategoryPartialUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["patchedProductCategoryRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productCategoryPartialUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = ProductCategory;
    return this.apiClient.callApi(
      "/api/product-category/{id}/",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productCategoryRetrieve operation.
   * @callback module:api/ProductCategoryApi~productCategoryRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProductCategory} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product category.
   * @param {Object} opts Optional parameters
   * @param {String} [fields]
   * @param {module:api/ProductCategoryApi~productCategoryRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProductCategory}
   */
  productCategoryRetrieve(id, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productCategoryRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      fields: opts["fields"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ProductCategory;
    return this.apiClient.callApi(
      "/api/product-category/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productCategoryUpdate operation.
   * @callback module:api/ProductCategoryApi~productCategoryUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProductCategory} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product category.
   * @param {module:model/ProductCategoryRequest} productCategoryRequest
   * @param {module:api/ProductCategoryApi~productCategoryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProductCategory}
   */
  productCategoryUpdate(id, productCategoryRequest, callback) {
    let postBody = productCategoryRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productCategoryUpdate",
      );
    }
    // verify the required parameter 'productCategoryRequest' is set
    if (
      productCategoryRequest === undefined ||
      productCategoryRequest === null
    ) {
      throw new Error(
        "Missing the required parameter 'productCategoryRequest' when calling productCategoryUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = ProductCategory;
    return this.apiClient.callApi(
      "/api/product-category/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
