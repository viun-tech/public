/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import PaginatedProductList from "../model/PaginatedProductList";
import PatchedProductRequest from "../model/PatchedProductRequest";
import Product from "../model/Product";
import ProductRequest from "../model/ProductRequest";

/**
 * Product service.
 * @module api/ProductApi
 * @version 0.8.0
 */
export default class ProductApi {
  /**
   * Constructs a new ProductApi.
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the productCreate operation.
   * @callback module:api/ProductApi~productCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Product} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {module:model/ProductRequest} productRequest
   * @param {module:api/ProductApi~productCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Product}
   */
  productCreate(productRequest, callback) {
    let postBody = productRequest;
    // verify the required parameter 'productRequest' is set
    if (productRequest === undefined || productRequest === null) {
      throw new Error(
        "Missing the required parameter 'productRequest' when calling productCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/api/product/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productDestroy operation.
   * @callback module:api/ProductApi~productDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product.
   * @param {module:api/ProductApi~productDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  productDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/product/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productList operation.
   * @callback module:api/ProductApi~productListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedProductList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Object} opts Optional parameters
   * @param {Array.<Number>} [category] Multiple values may be separated by commas.
   * @param {String} [fields]
   * @param {Array.<Number>} [id] Multiple values may be separated by commas.
   * @param {Array.<String>} [identifier] Multiple values may be separated by commas.
   * @param {String} [ordering] Which field to use when ordering the results.
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/ProductApi~productListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedProductList}
   */
  productList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      category: this.apiClient.buildCollectionParam(opts["category"], "csv"),
      fields: opts["fields"],
      id: this.apiClient.buildCollectionParam(opts["id"], "csv"),
      identifier: this.apiClient.buildCollectionParam(
        opts["identifier"],
        "csv",
      ),
      ordering: opts["ordering"],
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedProductList;
    return this.apiClient.callApi(
      "/api/product/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productPartialUpdate operation.
   * @callback module:api/ProductApi~productPartialUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Product} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product.
   * @param {Object} opts Optional parameters
   * @param {module:model/PatchedProductRequest} [patchedProductRequest]
   * @param {module:api/ProductApi~productPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Product}
   */
  productPartialUpdate(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["patchedProductRequest"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productPartialUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/api/product/{id}/",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productRetrieve operation.
   * @callback module:api/ProductApi~productRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Product} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product.
   * @param {Object} opts Optional parameters
   * @param {String} [fields]
   * @param {module:api/ProductApi~productRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Product}
   */
  productRetrieve(id, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      fields: opts["fields"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/api/product/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productUpdate operation.
   * @callback module:api/ProductApi~productUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Product} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
   * @param {Number} id A unique integer value identifying this product.
   * @param {module:model/ProductRequest} productRequest
   * @param {module:api/ProductApi~productUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Product}
   */
  productUpdate(id, productRequest, callback) {
    let postBody = productRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling productUpdate",
      );
    }
    // verify the required parameter 'productRequest' is set
    if (productRequest === undefined || productRequest === null) {
      throw new Error(
        "Missing the required parameter 'productRequest' when calling productUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Product;
    return this.apiClient.callApi(
      "/api/product/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
