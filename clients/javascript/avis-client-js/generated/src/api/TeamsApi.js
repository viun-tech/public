/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import PaginatedTeamList from "../model/PaginatedTeamList";
import Team from "../model/Team";
import TeamRequest from "../model/TeamRequest";

/**
 * Teams service.
 * @module api/TeamsApi
 * @version 0.8.0
 */
export default class TeamsApi {
  /**
   * Constructs a new TeamsApi.
   * @alias module:api/TeamsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the teamsCreate operation.
   * @callback module:api/TeamsApi~teamsCreateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Team} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {module:model/TeamRequest} teamRequest
   * @param {module:api/TeamsApi~teamsCreateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Team}
   */
  teamsCreate(teamRequest, callback) {
    let postBody = teamRequest;
    // verify the required parameter 'teamRequest' is set
    if (teamRequest === undefined || teamRequest === null) {
      throw new Error(
        "Missing the required parameter 'teamRequest' when calling teamsCreate",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Team;
    return this.apiClient.callApi(
      "/api/teams/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the teamsDestroy operation.
   * @callback module:api/TeamsApi~teamsDestroyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this team.
   * @param {module:api/TeamsApi~teamsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  teamsDestroy(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling teamsDestroy",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/teams/{id}/",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the teamsList operation.
   * @callback module:api/TeamsApi~teamsListCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PaginatedTeamList} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Object} opts Optional parameters
   * @param {Number} [page] A page number within the paginated result set.
   * @param {Number} [pageSize] Number of results to return per page.
   * @param {module:api/TeamsApi~teamsListCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PaginatedTeamList}
   */
  teamsList(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"],
      page_size: opts["pageSize"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = PaginatedTeamList;
    return this.apiClient.callApi(
      "/api/teams/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the teamsRetrieve operation.
   * @callback module:api/TeamsApi~teamsRetrieveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Team} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this team.
   * @param {module:api/TeamsApi~teamsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Team}
   */
  teamsRetrieve(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling teamsRetrieve",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Team;
    return this.apiClient.callApi(
      "/api/teams/{id}/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the teamsUpdate operation.
   * @callback module:api/TeamsApi~teamsUpdateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Team} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * A mixin that allows reading entities (listing and retrieving by id).
   * @param {Number} id A unique integer value identifying this team.
   * @param {module:model/TeamRequest} teamRequest
   * @param {module:api/TeamsApi~teamsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Team}
   */
  teamsUpdate(id, teamRequest, callback) {
    let postBody = teamRequest;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling teamsUpdate",
      );
    }
    // verify the required parameter 'teamRequest' is set
    if (teamRequest === undefined || teamRequest === null) {
      throw new Error(
        "Missing the required parameter 'teamRequest' when calling teamsUpdate",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["cookieAuth", "ApiKeyAuth"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
      "multipart/form-data",
    ];
    let accepts = ["application/json"];
    let returnType = Team;
    return this.apiClient.callApi(
      "/api/teams/{id}/",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
