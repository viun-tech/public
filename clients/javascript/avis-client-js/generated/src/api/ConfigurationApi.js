/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationType from '../model/ConfigurationType';
import ConfigurationTypeRequest from '../model/ConfigurationTypeRequest';
import PaginatedConfigurationTypeList from '../model/PaginatedConfigurationTypeList';
import PatchedConfigurationTypeRequest from '../model/PatchedConfigurationTypeRequest';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version 0.8.0
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configurationCreate operation.
     * @callback module:api/ConfigurationApi~configurationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {module:model/ConfigurationTypeRequest} configurationTypeRequest 
     * @param {module:api/ConfigurationApi~configurationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationType}
     */
    configurationCreate(configurationTypeRequest, callback) {
      let postBody = configurationTypeRequest;
      // verify the required parameter 'configurationTypeRequest' is set
      if (configurationTypeRequest === undefined || configurationTypeRequest === null) {
        throw new Error("Missing the required parameter 'configurationTypeRequest' when calling configurationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ConfigurationType;
      return this.apiClient.callApi(
        '/api/configuration/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationDestroy operation.
     * @callback module:api/ConfigurationApi~configurationDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this configuration.
     * @param {module:api/ConfigurationApi~configurationDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configurationDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/configuration/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationList operation.
     * @callback module:api/ConfigurationApi~configurationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedConfigurationTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Object} opts Optional parameters
     * @param {String} [fields] 
     * @param {Array.<Number>} [id] Multiple values may be separated by commas.
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/ConfigurationApi~configurationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedConfigurationTypeList}
     */
    configurationList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedConfigurationTypeList;
      return this.apiClient.callApi(
        '/api/configuration/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationPartialUpdate operation.
     * @callback module:api/ConfigurationApi~configurationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedConfigurationTypeRequest} [patchedConfigurationTypeRequest] 
     * @param {module:api/ConfigurationApi~configurationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationType}
     */
    configurationPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedConfigurationTypeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configurationPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ConfigurationType;
      return this.apiClient.callApi(
        '/api/configuration/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationRetrieve operation.
     * @callback module:api/ConfigurationApi~configurationRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] 
     * @param {module:api/ConfigurationApi~configurationRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationType}
     */
    configurationRetrieve(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configurationRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationType;
      return this.apiClient.callApi(
        '/api/configuration/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationUpdate operation.
     * @callback module:api/ConfigurationApi~configurationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A base viewset that allows reading, creating and updating objects. The following functionalities are added by the mixins:  * CreateModelMixin: allows creating objects * UpdateModelMixin: allows updating objects * DestroyModelMixin: allows deleting objects * OptimizedReadOnlyTracedViewSet: allows reading objects and adds tracing and optimized queryset fetching (with the use of the `fields` query parameter)
     * @param {Number} id A unique integer value identifying this configuration.
     * @param {module:model/ConfigurationTypeRequest} configurationTypeRequest 
     * @param {module:api/ConfigurationApi~configurationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationType}
     */
    configurationUpdate(id, configurationTypeRequest, callback) {
      let postBody = configurationTypeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configurationUpdate");
      }
      // verify the required parameter 'configurationTypeRequest' is set
      if (configurationTypeRequest === undefined || configurationTypeRequest === null) {
        throw new Error("Missing the required parameter 'configurationTypeRequest' when calling configurationUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ConfigurationType;
      return this.apiClient.callApi(
        '/api/configuration/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
