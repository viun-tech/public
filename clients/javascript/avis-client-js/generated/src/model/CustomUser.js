/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The CustomUser model module.
 * @module model/CustomUser
 * @version 0.8.0
 */
class CustomUser {
  /**
   * Constructs a new <code>CustomUser</code>.
   * @alias module:model/CustomUser
   * @param id {Number}
   */
  constructor(id) {
    CustomUser.initialize(this, id);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, id) {
    obj["id"] = id;
  }

  /**
   * Constructs a <code>CustomUser</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CustomUser} obj Optional instance to populate.
   * @return {module:model/CustomUser} The populated <code>CustomUser</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CustomUser();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("first_name")) {
        obj["first_name"] = ApiClient.convertToType(
          data["first_name"],
          "String",
        );
      }
      if (data.hasOwnProperty("last_name")) {
        obj["last_name"] = ApiClient.convertToType(data["last_name"], "String");
      }
      if (data.hasOwnProperty("email")) {
        obj["email"] = ApiClient.convertToType(data["email"], "String");
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>CustomUser</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomUser</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of CustomUser.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data),
        );
      }
    }
    // ensure the json data is a string
    if (
      data["first_name"] &&
      !(
        typeof data["first_name"] === "string" ||
        data["first_name"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `first_name` to be a primitive type in the JSON string but got " +
          data["first_name"],
      );
    }
    // ensure the json data is a string
    if (
      data["last_name"] &&
      !(
        typeof data["last_name"] === "string" ||
        data["last_name"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `last_name` to be a primitive type in the JSON string but got " +
          data["last_name"],
      );
    }
    // ensure the json data is a string
    if (
      data["email"] &&
      !(typeof data["email"] === "string" || data["email"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `email` to be a primitive type in the JSON string but got " +
          data["email"],
      );
    }

    return true;
  }
}

CustomUser.RequiredProperties = ["id"];

/**
 * @member {Number} id
 */
CustomUser.prototype["id"] = undefined;

/**
 * @member {String} first_name
 */
CustomUser.prototype["first_name"] = undefined;

/**
 * @member {String} last_name
 */
CustomUser.prototype["last_name"] = undefined;

/**
 * @member {String} email
 */
CustomUser.prototype["email"] = undefined;

export default CustomUser;
