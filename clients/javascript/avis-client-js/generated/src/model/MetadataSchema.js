/**
 * avis
 * VUE Autonomous Visual Inspection System (AVIS)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The MetadataSchema model module.
 * @module model/MetadataSchema
 * @version 0.8.0
 */
class MetadataSchema {
  /**
   * Constructs a new <code>MetadataSchema</code>.
   * @alias module:model/MetadataSchema
   * @param id {Number}
   * @param team {Number}
   * @param json {Object}
   * @param createdAt {Date}
   * @param updatedAt {Date}
   */
  constructor(id, team, json, createdAt, updatedAt) {
    MetadataSchema.initialize(this, id, team, json, createdAt, updatedAt);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, id, team, json, createdAt, updatedAt) {
    obj["id"] = id;
    obj["team"] = team;
    obj["json"] = json;
    obj["created_at"] = createdAt;
    obj["updated_at"] = updatedAt;
  }

  /**
   * Constructs a <code>MetadataSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetadataSchema} obj Optional instance to populate.
   * @return {module:model/MetadataSchema} The populated <code>MetadataSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetadataSchema();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("team")) {
        obj["team"] = ApiClient.convertToType(data["team"], "Number");
      }
      if (data.hasOwnProperty("json")) {
        obj["json"] = ApiClient.convertToType(data["json"], Object);
      }
      if (data.hasOwnProperty("created_at")) {
        obj["created_at"] = ApiClient.convertToType(data["created_at"], "Date");
      }
      if (data.hasOwnProperty("updated_at")) {
        obj["updated_at"] = ApiClient.convertToType(data["updated_at"], "Date");
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>MetadataSchema</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataSchema</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of MetadataSchema.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          "The required field `" +
            property +
            "` is not found in the JSON data: " +
            JSON.stringify(data),
        );
      }
    }

    return true;
  }
}

MetadataSchema.RequiredProperties = [
  "id",
  "team",
  "json",
  "created_at",
  "updated_at",
];

/**
 * @member {Number} id
 */
MetadataSchema.prototype["id"] = undefined;

/**
 * @member {Number} team
 */
MetadataSchema.prototype["team"] = undefined;

/**
 * @member {Object} json
 */
MetadataSchema.prototype["json"] = undefined;

/**
 * @member {Date} created_at
 */
MetadataSchema.prototype["created_at"] = undefined;

/**
 * @member {Date} updated_at
 */
MetadataSchema.prototype["updated_at"] = undefined;

export default MetadataSchema;
