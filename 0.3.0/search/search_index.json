{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Avis documentation!","text":""},{"location":"about/","title":"Coming soon!","text":""},{"location":"api/clients/","title":"AVIS Clients","text":"Language Package Description Python avis-client (Source, Documentation) Python client for the AVIS API. <p>For examples on how to use the clients, please refer to the examples section.</p>"},{"location":"api/rest/","title":"AVIS RESTful API","text":""},{"location":"api/rest/#introduction","title":"Introduction","text":"<p>The AVIS API is RESTful. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <p>The API is organized around resources. A non-exhaustive list of the main resources are:</p> <ul> <li>Case</li> <li>Image</li> <li>Inspection object</li> <li>Inspection result</li> <li>User, Team and Membership</li> </ul> <p>See the Swagger UI for a complete list of resources and their endpoints.</p>"},{"location":"api/rest/#api-conventions","title":"API conventions","text":""},{"location":"api/rest/#resources","title":"Resources","text":"<p>Resources names are lowercase, singular with no spaces in the API. For example, an Inspection Object will be named as <code>inspectionobject</code>.</p>"},{"location":"api/rest/#relationships","title":"Relationships","text":"<p>Resources are related to each other using foreign keys. For example, a <code>Case</code> resource has a foreign key to the <code>InspectionObject</code> resource. This relationship is represented in the API's requests and responses as the ID of the related resource.</p> <p>For example to create a new case linked to the inspection object with ID 5, you would make a POST request to the <code>/api/case/</code> endpoint with the following request body:</p> <pre><code>{\n  ...\n  \"inspection_object\": 5,\n  ...\n}\n</code></pre> <p>Some resources support multiple relationships. For example, a <code>Case</code> resource can have multiple images. In this case,</p> <pre><code>{\n  ...\n  \"images\": [\n    1,\n    2,\n    3\n  ],\n  ...\n}\n</code></pre>"},{"location":"api/rest/#http-verbs-and-actions","title":"HTTP Verbs and actions","text":"<p>Each resource supports the following actions:</p> Action Method Endpoint Description list GET /api/{resource}/ List all resources of a given type retrieve GET /api/{resource}/{id}/ Retrieve a single resource  by id create POST /api/{resource}/ Create a new resource update PUT /api/{resource}/{id}/ Update a resource by id partial update PATCH /api/{resource}/{id}/ Partially update a resource by id delete DELETE /api/{resource}/{id}/ Delete a resource by id"},{"location":"api/rest/#listing-all-existing-resources","title":"Listing all existing resources","text":"<p>To list all existing resources of a given type, make a GET request to the resource's endpoint.</p> List all cases<pre><code>curl -X 'GET' 'http://localhost:8000/api/case/' \\\n  -H 'accept: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;'\n</code></pre>"},{"location":"api/rest/#retrieving-a-single-resource","title":"Retrieving a single resource","text":"<p>To retrieve a single resource, make a GET request to the resource's endpoint with the resource's ID.</p> Retrieve a case<pre><code>curl -X 'GET' 'http://localhost:8000/api/case/1/' \\\n  -H 'accept: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;'\n</code></pre>"},{"location":"api/rest/#creating-a-new-resource","title":"Creating a new resource","text":"<p>To create a new resource, make a POST request to the resource's endpoint with the resource's data required in the request body.</p> Create a new case<pre><code>curl -X 'POST' 'http://localhost:8000/api/case/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;' \\\n  -d '{\n        \"inspection_object\": 5\n        \"opened_by\": 45,\n        \"images\": [],\n        \"team\": 3\n}'\n</code></pre>"},{"location":"api/rest/#updating-a-resource","title":"Updating a resource","text":"<p>To update a resource, make a PUT request to the resource's endpoint with the resource's data required in the request</p> Update a case<pre><code>curl -X 'PUT' 'http://localhost:8000/api/case/1/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;' \\\n  -d '{\n        \"inspection_object\": 5\n        \"opened_by\": 45,\n        \"images\": [],\n        \"team\": 3\n}'\n</code></pre> <p>Please note that all the resource's required fields are required in the request body when updating a resource.</p>"},{"location":"api/rest/#partially-updating-a-resource","title":"Partially updating a resource","text":"<p>To partially update a resource, make a PATCH request to the resource's endpoint with the resource's data required in the request body.</p> Partially update a case<pre><code>curl -X 'PATCH' 'http://localhost:8000/api/case/1/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;' \\\n  -d '{\n        \"inspection_object\": 5\n}'\n</code></pre> <p>In this case, only the fields that are required to be updated are passed in the request body.</p>"},{"location":"api/rest/#deleting-a-resource","title":"Deleting a resource","text":"<p>To delete a resource, make a DELETE request to the resource's endpoint.</p> Delete a case<pre><code>curl -X 'DELETE' 'http://localhost:8000/api/case/1/' \\\n  -H 'X-Api-Key: &lt;redacted&gt;' \\\n  -H 'accept: application/json'\n</code></pre>"},{"location":"api/rest/#http-codes","title":"HTTP codes","text":"<p>The API uses standard HTTP response codes to indicate the success or failure of an API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that failed given the information provided, and codes in the 5xx range indicate an error with AVIS's servers.</p>"},{"location":"api/rest/#error-codes","title":"Error codes","text":"<p>Most common error codes:</p> <ul> <li>400 Bad Request: The request was invalid or cannot be otherwise served. An accompanying error message will explain   further.</li> <li>401 Unauthorized: The request requires user authentication.</li> <li>403 Forbidden: The server understood the request, but is refusing to fulfill it. You might not have enough permissions   to access the resource.</li> <li>404 Not Found: The requested resource could not be found or does not exist.</li> </ul>"},{"location":"api/rest/#authentication","title":"Authentication","text":"<p>The API supports two authentication methods:</p> <ul> <li>API keys: for authenticating requests programmatically from your application</li> <li>Session cookies: for authenticating requests from your browser when you're logged in to the AVIS   web UI</li> </ul>"},{"location":"api/rest/#api-keys","title":"API Keys","text":""},{"location":"api/rest/#create","title":"Create","text":"<p>Info</p> <p>The preferred way to create an API key is to use the AVIS web interface. The following instructions are for the rare case where you need to create a new API key programmatically using an existing API key.</p> <p>API keys are used to authenticate requests made by your application to the AVIS API. To create an API key make a POST request to the <code>/api/api-keys</code> endpoint:</p> Create an API key<pre><code>curl -X 'POST' 'http://localhost:8000/api/keys/' \\\n        -H 'accept: */*' \\\n        -H 'Content-Type: application/json' \\\n        -H 'Cookie: sessionid=...; csrftoken=...'\n</code></pre> <p>This will return a JSON response containing your API key:</p> <pre><code>{\n  \"key\": \"&lt;redacted&gt;\",\n  \"created\": \"2024-01-24T05:16:31.894775Z\",\n  \"name\": \"Zygz3GsXnBSHBr6nDkb4Fh\",\n  \"expiry_date\": \"2024-01-31T05:16:31.887783Z\",\n  \"revoked\": false,\n  \"message\": \"Save this key somewhere safe - you will only see it once!\"\n}\n</code></pre> <p>You can use this key to authenticate your requests using the <code>X-Api-Key</code> header:</p> Use the API key to query the API<pre><code>curl -X 'GET' 'http://localhost:8000/api/case/' \\\n  -H 'accept: application/json' \\\n  -H 'X-Api-Key: &lt;redacted&gt;'\n</code></pre>"},{"location":"api/rest/#revoke","title":"Revoke","text":"<p>To revoke an API key make a POST request to the <code>/api/api-keys/{name}/revoke</code> endpoint where <code>{name}</code> is the name of the API key you want to revoke:</p> Revoke an API key<pre><code>curl -X 'POST' 'http://localhost:8000/api/api-keys/Zygz3GsXnBSHBr6nDkb4Fh/revoke' \\\n        -H 'accept: */*' \\\n        -H 'Content-Type: application/json' \\\n        -H 'Cookie: sessionid=...; csrftoken=...'\n</code></pre>"},{"location":"api/rest/#session-cookies","title":"Session Cookies","text":"<p>Warning</p> <p>This authentication method is used for the AVIS web interface. It is not recommended to use it for programmatic access to the API.</p> <p>This requires the user to authenticate with username and password using the <code>/accounts/login/</code> endpoint in their browser. The browser will store the session id in a cookie called <code>sessionid</code>.</p> <p>A CSRF token needs be passed as well to protect against cross-site request forgery attacks. This is the default authentication mechanism used for the AVIS web interface.</p> <p>You can get the <code>csrftoken</code> cookie by making a unauthenticated request to any <code>/accounts</code> endpoint:</p> Get the csrftoken cookie<pre><code>curl -c cookies.txt -s -X 'GET' 'http://localhost:8000/accounts/login/' \\\n  -H 'accept: */*' &gt; /dev/null\n</code></pre> <p>The sessionid will be in the cookies.txt file:</p> Get the sessionid cookie<pre><code>cat cookies.txt\n</code></pre> <p>The REST API can also be used with this authentication mechanism: just pass the <code>sessionid</code> and <code>csrftoken</code> cookies with the request:</p> Use the sessionid and csrftoken cookies to authenticate<pre><code>curl -X GET 'http://localhost:8000/api/cases/' \\\n  -H 'accept: application/json' \\\n  -H 'Cookie: sessionid=...; csrftoken=...'\n</code></pre> <p>The swagger UI can also be used with this authentication mechanism: just login normally with the <code>/accounts/login/</code> endpoint in your browser and then use the swagger UI to make requests to the API.</p>"},{"location":"api/rest/swagger/","title":"Swagger UI","text":""},{"location":"examples/","title":"Example","text":""},{"location":"examples/#integration","title":"Integration","text":"<p>There are several examples of integration of the AVIS API with real-world, productive manufacturing environments and setups.</p> <ol> <li>Capture pictures with a Luxonis    camera: examples/take-picture-luxonis-camera</li> <li>Interact with the AVIS API using the python client (open a case, add pictures, get inspection results,    etc...): examples/use-avis-client</li> </ol> <p>For an end-to-end example of automation (signaling using modbus tcp, taking pictures using a luxonis camera, interacting with the AVIS API using a python client) see the agent's code in examples/agent</p>"},{"location":"faq/","title":"Coming soon!","text":""},{"location":"getting-started/","title":"Coming soon!","text":""},{"location":"platform/","title":"Coming soon!","text":""}]}